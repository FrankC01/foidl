#!/bin/bash

# ------------------------------------------------------------------------------
# Copyright 2018 Frank V. Castellucci
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

usage() {
    echo "Usage:"
    echo "  $0 [build options] [args]"
    echo ""
    echo "Caution: If called without arguments everything will build"
    echo ""
    echo "Build options:"
    echo "  -h                  print usage and exit"
    echo "  -D                  build ALL"
    echo "  -d  [targets]       builds specific targets"
    echo ""
    echo "Optional build targets:"
    echo "  -d     rtl,comp     run-time-library or compiler"
    echo ""
    echo "Examples:"
    echo "  build                   "
    echo "  build -D                "
    echo "  build -d rtl            "
    echo "  build -d foidlc         "
    echo ""
}

info() {
    echo -e "\033[0;36m\n[--- $1 ---]\n\033[0m"
}

warn() {
    echo -e "\033[0;31m\n[--- $1 ---]\n\033[0m"
}

top_dir=$(cd $(dirname $(dirname $0)) && pwd)
bin_dir=$top_dir/bin


convert_target_to_plan() {
    IFS=',; ' read -r -a cmd_array <<< $1
    IFS=',; ' read -r -a lookup_array <<< $2
    IFS=',; ' read -r -a build_array <<< $3
    local result=""

    # Iterate through command string
    for cindex in "${!cmd_array[@]}"
    do
        hit=false
        # Iterate through loopup to get index of fully qualified info
        for lindex in "${!lookup_array[@]}"
        do
            if [ ${cmd_array[cindex]} = ${lookup_array[lindex]} ]; then
                result="$result ${build_array[lindex]};"
                hit=true
                break
            fi
        done
        # If not a hit we need to boogie
        if [ $hit = false ]; then
            echo "No hit on ${cmd_array[cindex]}"
            result=none
            break
        fi
    done
    echo $result|tr -d ' '
}

# Check for args

while getopts ":hDd:Pp:bz" opt; do
    # echo "Processing: ${@:$OPTIND}"
	case $opt in
		h)
			usage
			exit 0
			;;
        D)
            # Check for all being set
            ;;
		d)
			# Check for all being set
			;;
        *)
            warn "'-$OPTARG' expects to have additional parameters "
            usage
            exit 1
            ;;
        ?)
            warn "Invalid option: -$OPTARG" >&2
            usage
            exit 1
            ;;
    esac
done
shift $(($OPTIND-1))

runtime_build() {
    info "Building foidl runtime"
}

build_compiler() {
    info "Building foidlc"
}

main() {
    info "Building"

}

main