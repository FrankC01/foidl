; Grammar
; ';' comment
; {} optional - zero or more
; [] zero or one
; 'term' terminal
; non-term (no quotes) - non terminal
; reg_ex(...) - regular expression

S =: module

module =: 'module' symbol {i_decls} {decltypes}

idecls =: 'include' (idecl_list | symbol_type)
idelc_list =: '[' symbol {[,] symbol} ']'

decl_types =: {var_decl | func_decl}

var_decl =: 'var' symbol_type [expression]

func_decl =: 'func' symbol_type symbol_list {expression}

expression =: literal
			| symbol_type
			| collection
			| func_call
			| if_expr
			| partial expr
			| group_expr
			| let_expr
			| match_expr
			| lambda_expr

func_call =: func_prefix expression {expression}
func_prefix =: symbol_type ":"

; Partials are interesting:
; 1. If the symbol type is func reference and argument counts align, then it becomes a call
; 2. If the symbol type is func reference and arg count in partial is less, it's a partial declaration
; 3. If the symbol type is lambda reference and argument counts align, then it becomes a call
; 4. If the symbol type is lambda reference and arg count in partial is less, it's a partial declaration
; 5. Otherwise they are partial invocations

partial_expr =: "(" (func_prefix | symbol_type) {expression} ")"

group_expr =: "@(" expression {expression} ")"

let_expr =: "let" [symbol_type] "[" symbol_type expression {symbol_type expression} "]" expression

match_expr =: 'match' [symbol_type] expression match_pair

match_pair =: '|' expression expression {match_pair}
			| ':default' expression

; Lambdas my be interesting:
; 1. If the body has not references to funcargs, letargs, letresult it's straight up
; 2. Otherwise it is a closure. Closures need free variable management:
;	1. Each free variable inserts into the begining of the declared symbol_list
;	2. It needs to imbue those free vars at the point of declaration

lambda_expr =: '^' symbol_list expression

symbol_list =: "[" "]"
			| "[" symbol_type {[,] symbol_type} "]"

symbol_type =: symbol 							; foo
			| reg_ex([a-zA-Z][a-zA-Z0-9_]+!)	; fo_o!
			| reg_ex([a-zA-Z][a-zA-Z0-9_]+\?)	; f_oo?

symbol =: reg_ex([a-zA-Z]([a-zA-Z0-9_]*)?)

collection =: map_collection
			| list_collection
			| vector_collection
			| set_collection

map_collection =: "{" expression expression {[,] expression expression} "}"
				| "{" "}"

list_collection =: "[" expression {[,] expression } "]"
				| "[" "]"

set_collection =: "#{" expression {[,] expression} "}"
				| "#{" "}"

vector_collection =: "<" expression {[,] expression} ">"
				| "<" ">"

literal =: integer 	; 1234
		| real		; 0.1, 19.52, 1.39489384938493849384983
		| hex		; 0x9ab5
		| bit 		; 0b01010101
		| string 	; "Something in quotes"
		| keyword   ; :master
		| char 		; 'c', 'd', '1'