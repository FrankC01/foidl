; Grammar
; ';' comment
; {} optional - zero or more
; [] zero or one
; 'term' terminal
; NON-TERMINAL
; reg_ex(...) - regular

S =: MODULE

MODULE =: 'module' SYMBOL {IDECLS} {DECLTYPES}

IDECLS =: 'include' (IDECL_LIST | SYMBOL)

IDELC_LIST =: '[' SYMBOL {[,] SYMBOL} ']'

DECLTYPES =: {VAR_DECL | FUNC_DECL}

VAR_DECL =: 'var' SYMBOL_TYPE [EXPRESSION]

FUNC_DECL =: 'func' SYMBOL_TYPE SYMBOL_LIST {EXPRESSION}

EXPRESSION =: LITERAL
			| SYMBOL_TYPE
			| COLLECTION
			| FUNC_CALL
			| IF_EXPR
			| PARTIAL EXPR
			| GROUP_EXPR
			| LET_EXPR
			| MATCH_EXPR
			| LAMBDA_EXPR

FUNC_CALL =: FUNC_PREFIX EXPRESSION {EXPRESSION}

PARTIAL_EXPR =: "(" SYMBOL_TYPE {EXPRESSION} ")"

GROUP_EXPR =: "@(" EXPRESSION {EXPRESSION} ")"

LET_EXPR =: "let" [SYMBOL_TYPE] "[" SYMBOL_TYPE EXPRESSION {SYMBOL_TYPE EXPRESSION} "]" EXPRESSION

MATCH_EXPR =: 'match' [SYMBOL_TYPE] EXPRESSION MATCH_PAIR

MATCH_PAIR =: '|' EXPRESSION EXPRESSION {MATCH_PAIR}
			| ':default' EXPRESSION

LAMBDA_EXPR =: '^' SYMBOL_LIST EXPRESSION

COLLECTION 	=: MAP_COLLECTION
			| LIST_COLLECTION
			| VECTOR_COLLECTION
			| SET_COLLECTION

MAP_COLLECTION =: "{" EXPRESSION EXPRESSION {[,] EXPRESSION EXPRESSION} "}"
				| "{" "}"

LIST_COLLECTION =: "[" EXPRESSION {[,] EXPRESSION } "]"
				| "[" "]"

SET_COLLECTION =: "#{" EXPRESSION {[,] EXPRESSION} "}"
				| "#{" "}"

VECTOR_COLLECTION =: "<" EXPRESSION {[,] EXPRESSION} ">"
				| "<" ">"

LITERAL =: INTEGER
		| REAL
		| HEX
		| BIT
		| STRING
		| KEYWORD
		| CHAR

SYMBOL_LIST =: "[" "]"
			| "[" SYMBOL_TYPE {[,] SYMBOL_TYPE} "]"

SYMBOL_TYPE =: SYMBOL
			| reg_ex("[a-zA-Z][a-zA-Z0-9_]+!")
			| reg_ex("[a-zA-Z][a-zA-Z0-9_]+\?")

SYMBOL 		=: reg_ex("[a-zA-Z]([a-zA-Z0-9_]*)?")

FUNC_PREFIX =: SYMBOL_TYPE ":"

INTEGER 	=:	regex("-?[0-9]+")
REAL 		=: 	regex("-?(?:0|[1-9]\d*)\.\d*(?:[eE][+\-]?\d+)?")
HEX 		=: 	regex("0[xX][0-9a-fA-F]+")
BIT 		=: 	regex("0[bB][0-1]+")
STRING		=: 	regex("\"(.|\n)*?\"")
KEYWORD 	=: 	regex(":[a-zA-Z]([a-zA-Z0-9_]*)?")
CHAR 		=:  regex("\'[0-9a-zA-Z]*?\'")

COMMENT 	=:	regex(";.*")
IGNORES 	=: 	regex("[,\t ]+")
NLCR 		=:  regex("(\r\n|[\r\n])")