;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; nchan
; New channel testing
;
; Copyright (c) Frank V. Castellucci
; All Rights Reserved
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

module nchan

var cprp {
    chan_target nil
    chan_type   chan_file
    chan_render render_line
    chan_mode   open_r
}

var cpwp {
    chan_target nil
    chan_type   chan_file
    chan_render render_line
    chan_mode   open_w
}

func lines [chan]
    let line [] reads!: chan
    ?: =: line eof
        nil
        @(
            printnl!: line
            lines: chan
        )

func consume [fname]
    let chan [] opens!: extends: cprp chan_target fname
    ?: nil?: chan
        @(
            print!: fname printnl!: " does not exist for reading"
        )
        lines: chan
        printnl!: closes!: chan

func writedata[fname]
    let chan [] opens!: extends: cpwp chan_target fname
    let imap [] {"foo" "bar" :key :value}
    writes!: chan "This is a foo bar `n"
    writes!: chan "This is too `n"
    writes!: chan [1 2 3 4]
    writes!: chan nlchr
    writes!: chan <7 8 9 "foo">
    writes!: chan nlchr
    writes!: chan #{10 11 10 9}
    writes!: chan nlchr
    writes!: chan imap
    writes!: chan nlchr
    fold:
        ^[a b]
            @(
                writes!: a b
                writes!: a nlchr
                a
            )
        chan imap
    writes!: chan 'c'
    writes!: chan nlchr
    writes!: chan open_rb
    closes!: chan

func main [argv]
    printnl!: chr0
    consume: "data/csv_hdr.csv"
    writedata: "fname.txt"
    printnl!: quaf!: "fname.txt"
