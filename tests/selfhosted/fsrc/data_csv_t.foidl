; ------------------------------------------------------------------------------
; Copyright 2019 Frank V. Castellucci
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
; ------------------------------------------------------------------------------

; Uses tokenization to chunk up each row
; to a token

module data_csv_t

var :private usage "usage: data_csv_t input [true | false]"
var :private comma_re regex: ","

var :private patterns [
    {
        :type   :row
        :regex  regex: ".+"
    }
]

; Function: invert grid
; Description: Inverts inbound list elements

func :private invert[grid]
    fold: ^[a e] extend: a e [] grid

; Function: to_grid accum tok
; Description: split the token stream on the comma

func :private to_grid [accum tok]
    extend: accum split: get: tok :token_str comma_re

; Function: to_map hdr accum el
; Description: zips header key with row values to produce list of maps

func :private to_map[hdr accum el]
    extend: accum zipmap: hdr el

; Function: to_map_with_header grid
; Description: Use first row as keys and convert
; remaining rows to maps

func :private to_map_with_header [grid]
    fold: (to_map first: grid) [] invert: pop: grid

; Function: parse_csv
; Description: Tokenizes file and convert to
; lists of lists (grid) and either returns the grid
; or a list of maps where the first row from grid is
; assumed to be the header (keys)

func parse_csv [fname hashdr]
    let src_string [] quaf!: fname
    let grid []
        invert:
            fold:
                to_grid
                []
                tokenize: src_string patterns []
    let res []
        match hashdr
            | "true"    to_map_with_header: grid
            | "false"   grid
    res


func main [argv]
    printnl!:"`ndata_csv_t - reads CSV files to list of maps or list of lists`n"
    match count: argv
        | 3         printnl!: parse_csv: get: argv 1 get: argv 2
        | :default  printnl!:usage
