;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; playground
; playground file containing bits and pieces of non-
; related foidl code
;
; Copyright (c) John G. Bucci
; All Rights Reserved
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

module playground

; Used to check if a list can contain a parameter list with mixed usage of
; comma dilimiters

var list_with_mixed_delims [1, 2 3 4, 5]

; Used to check if a list can have a function supplied as a parameter that is
; able to be called

func list_func_1 [] "Func One called"
func list_func_2 [] "Func Two called"
; var list_with_functions [list_func_1 list_func_2]

; Used to check collection functions
var list_for_coll_funcs [9 8 7 6 5 4 3 2 1 0]

; Entry point
func main []
    printnl!: ""
    printnl!: "Welcome to the foidl playground!"
    printnl!: ""

    ; Test One
    print!: "Test One - List declared as [1, 2 3 4, 5] compiles and works because a "
        print!: "parameter list can have mixed usage of the comma dilimiter => "
        printnl!: list_with_mixed_delims

    ; Test Two
    ; printnl!: "Test Two - List can contain callable functions"
    ; printnl!: map: call_funcs list_with_functions
    ; printnl!: list_func_1

    ; Test Three
    print!: "Test Three - The 'first' function can get first value in "
    print!: list_for_coll_funcs
    printnl!: format: " which is {}" [first: list_for_coll_funcs]

    ; Test Four
    print!: "Test Four - The 'second' function can get second value in "
    print!: list_for_coll_funcs
    printnl!: format: " which is {}" [second: list_for_coll_funcs]

    ; Test Five
    print!: "Test Five - The 'rest' function can get every value but first value in "
    print!: list_for_coll_funcs
    print!: " which is "
    printnl!: rest: list_for_coll_funcs

    ; Test Six
    print!: "Test Six - The 'last' function can get last value in "
    print!: list_for_coll_funcs
    printnl!: format: " which is {}" [last: list_for_coll_funcs]

    ; Test Seven
    print!: "Test Seven - The 'get' function can get the value associated with the given index 5 in "
    print!: list_for_coll_funcs
    printnl!: format: " which is {}" [get: list_for_coll_funcs 5]

    ; Test Eight
    print!: "Test Eight - The 'get' function will return nil if the given index 20 is out-of-bounds in "
    print!: list_for_coll_funcs
    printnl!: format: " which is {}" [get: list_for_coll_funcs 20]

    ; Test Nine
    print!: "Test Nine - The 'getd' function will return the given default (i.e. 9999) if the given index 20 is out-of-bounds in "
    print!: list_for_coll_funcs
    printnl!: format: " which is {}" [getd: list_for_coll_funcs 20 9999]

    ; Test Ten
    print!: "Test Ten - The 'index_of' function will return the index of the given value 8 is  "
    print!: list_for_coll_funcs
    printnl!: format: " which is {}" [index_of: list_for_coll_funcs 8]

    ; Test Eleven
    print!: "Test Eleven - The 'pop' function will return a new list with first value not included in "
    print!: list_for_coll_funcs
    print!: " which is "
    printnl!: pop: list_for_coll_funcs

    ; Test Twelve
    print!: "Test Twelve - The 'push' function will return a new list with a new entry at the start of an existing list in "
    printnl!: list_for_coll_funcs
    print!: " which is "
    print!: push: list_for_coll_funcs 999
    print!: " The old list is still the same "
    printnl!: list_for_coll_funcs

    ; Test Thirteen
    print!: "Test Thirteen - The 'update' function will return a new list with a new entry replacing an existing at the given index of an existing list in "
    printnl!: list_for_coll_funcs
    print!: " which is "
    print!: update: list_for_coll_funcs 5 999
    print!: " The old list is still the same "
    printnl!: list_for_coll_funcs

    ; Test Fourteen
    print!: "Test Fourteen - The 'remove' function will return a new list with entries for which pred: entry returns falsey "
    printnl!: list_for_coll_funcs
    print!: " which is "
    print!: remove: odd? list_for_coll_funcs
    print!: " The old list is still the same "
    printnl!: list_for_coll_funcs

    ; Test Fifteen
    print!: "Test Fifteen - The 'drop' function will return a new list with count remove from existing list in "
    printnl!: list_for_coll_funcs
    print!: " which is "
    print!: drop: 5 list_for_coll_funcs
    print!: " The old list is still the same "
    printnl!: list_for_coll_funcs

    ; Test Sixteen
    print!: "Test Sixteen - The 'dropFor' function will ...(do something)... of an existing list in "
    printnl!: list_for_coll_funcs
    print!: " which is "
    ; print!: dropFor: list_for_coll_funcs
    print!: " The old list is still the same "
    printnl!: list_for_coll_funcs
    printnl!: "NOT WORKING!!!"

    ; Test Seventeen
    print!: "Test Seventeen - The 'dropLast' function will ...(do something)... of an existing list in "
    printnl!: list_for_coll_funcs
    ; print!: " which is "dropLast: list_for_coll_funcs
    print!: " The old list is still the same "
    printnl!: list_for_coll_funcs
    printnl!: "NOT WORKING!!! - Encounters RTE"

    ; Test Eighteen
    print!: "Test Eighteen - The 'take' function will ...(do something)... of an existing list in "
    printnl!: list_for_coll_funcs
    print!: " which is "take: 5 list_for_coll_funcs
    print!: " The old list is still the same "
    printnl!: list_for_coll_funcs
    printnl!: "NOT WORKING!!!"

    ; Test Nineteen
    let name [] "JohnnyB"
    print!: "Test Nineteen - The 'split' function will ...(do something)... of an existing string in "
    printnl!: name
    print!: " which is "split: name "n"
    print!: " The old string is still the same "
    printnl!: name
    printnl!: "NOT WORKING!!!"

    printnl!: ""
