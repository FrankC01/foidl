; ------------------------------------------------------------------------------
; Copyright 2018 Frank V. Castellucci
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
; ------------------------------------------------------------------------------

; Introduction to the let and group expressions

module letgrpexprs

; For function and function calls see funcalls.foidl
; For flow (?: and match) expressions see flowexprs.foidl

; Group
; Syntax: '@(' expression? {expression} ')'
;   expression - One or more expressions that make up the group body.
;                Returns result of last expression in the group body.
; Note: Groups are the semantic equivalent of 1 expression

func group_expression0 [a]
    ; Nonsensical group to demonstrate multiple functions
    @(
        printnl!: "First expression in group"
        printnl!: "Second expression in group"
        a   ;   Last expression is the group result
    )

;
; Let
; Syntax: let [symbol] '[' (symbol expression)? {[,] symbol expression} ']' expression
;   [symbol] - Optional local symbol exposing result in enclosing scope
;   arglist - A list of zero or more symbol and expression pairs. The symbol of the
;             pair is consider local to the lexical scope of the let statement
;   expression - Expression executed in let body
;
; Note: Lets are the semantic equivalent of 1 expression


func let_expression0 [a]

    ; Nonsensical addition of function argument with 10 with function locally
    ; scope result 'b'

    let b []
        +: a 10

    ; Nonsensical multiplication of previous let result 'b' with let local var
    ; 'd' which is result of addition of 'b' with 5
    ; scope result 'b'
    ; Note that 'd' goes out of scope after execution of let expression

    let c [d +: b 5]
        *: b d

    ;   Demonstrate using group as the let expression
    let e []
        @(
            print!: "Result of first let = " printnl!: b
            print!: "Result of second let = " printnl!: c
            printnl!: "Let/Group result will be 200"
            200
        )

    ; Return list of let results
    [b c e]

func main [argv]
    printnl!: "Let_0 churns up 7 "
    let x [] let_expression0: 20
    print!: "Result of let/group churn = " printnl!: x
