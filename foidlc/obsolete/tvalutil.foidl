;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; tvalutil
; Lite and heavy weight validations
;
; Copyright (c) Frank V. Castellucci
; All Rights Reserved
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

module  tvalutil

include state
include errors

var generalErr "General verification error"
var emptyToks "No tokens presented for validation"
var modFirst "Module declaration required as first non-comment line"
var tooManyArgs " exceeds maximum argument count of 16 "


func valNext []
	;printnl*: "valNext"
	vnext:

func valSymbol []
	;printnl*: "valSymbol"
	vexpect: :symbol

;	:liststart already processed

func valArgList []
	?: =: vcurrent_type: :listend
		nil
		@(
			valSymbol:
			valArgList:
		)


func valLetArgList []
	?: =: vcurrent_type: :listend
		nil
		@(
			valSymbol:
			foidl_dispatch0: get: syntax! :exprjmp
			valLetArgList:
		)

func valCollection [ stopKw scnt ]
	?: =: vcurrent_type: stopKw
		scnt
		@(
			foidl_dispatch0: get: syntax! :exprjmp
			valCollection: stopKw inc: scnt
		 )

func valVector []
	;printnl*: "valVector"
	vexpect: :vectorstart
	valCollection: :listend zero
	vexpect: :listend

func valList []
	;printnl*: "valList"
	vexpect: :liststart
	valCollection: :listend zero
	vexpect: :listend

func valSet []
	;printnl*: "valSet"
	vexpect: :setstart
	valCollection: :mapend zero
	vexpect: :mapend

func validateMap [token cnt]
	?: =: mod: cnt two zero
		token
		failMap: token cnt

func valMap []
	;printnl*: "valMap"
	let ct [] vcurrent:
	vexpect: :mapstart
	validateMap: ct valCollection: :mapend zero
	vexpect: :mapend

func valPartial []
	;printnl*: "valPartial"
	vexpect: :partialstart
	valCollection: :partialend zero
	vexpect: :partialend

func valIf []
	;printnl*: "valIf"
	vexpect: :if
	foidl_dispatch0: get: syntax! :exprjmp
	foidl_dispatch0: get: syntax! :exprjmp


