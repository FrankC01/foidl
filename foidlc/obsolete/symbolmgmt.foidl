;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; symbolmgmt
; Symbol table
;
; Copyright (c) Frank V. Castellucci
; All Rights Reserved
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

module symbolmgmt
include foidlrtm

include state
include asttypes

func insertInContext [fnd token node]
	hidesCheck: fnd token node
	foidl_extendKV!: get: context! :symtable get: token :lexeme node

func insertFunctionIntoSymbolTable [token cnt]
	let [ nm genName: get: token :lexeme ]
		insertInContext:
			inContextSymbols?: nm
			token
			genAstFuncRef: get: context! :module nm cnt

func funcToSymbolTable [token cnt]
	?: and: =: get: token :state :private =: get: context! :ignorep false
		nil
		insertFunctionIntoSymbolTable: token cnt

func insertVariableIntoSymbolTable [token]
	let [ nm genName: get: token :lexeme ]
		insertInContext:
			inContextSymbols?: nm
			token
			genAstVarRef: get: context! :module nm :unknown

func varToSymbolTable [token]
	?: and: =: get: token :state :private =: get: context! :ignorep false
		nil
		insertVariableIntoSymbolTable: token

func readySymbolMap [mtoken]
	foidl_extendKV!: context! :module get: mtoken :lexeme
	foidl_extendKV!: context! :symtable foidl_map_inst!:
	get: context! :symtable

func includeList [coll]
	?: =: vcurrent_type: :listend
		coll
		@(
			extend*: coll get: vcurrent: :lexeme
			vnext:
			includeList: coll
		)

func includeExtract [coll]
	match get: vnext: :type
	| :include @( vexpect: :include
						vexpect: :liststart
						includeExtract: includeList: coll )
	| :end coll
	| :default includeExtract: coll

func filterIncludes [tokens coll]
	syntaxSetup!: tokens nil
	includeExtract: coll


