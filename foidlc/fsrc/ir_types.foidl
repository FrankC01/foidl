;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ir_types
; LLVM Generation
;
; Copyright (c) Frank V. Castellucci
; All Rights Reserved
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

module ir_types
include langcorem

include ast_type
include errors

; Integer types
var int_64  inttype: 64
var int_32  inttype: 32
var int_8   inttype: 8

; Well knowns
var any         named_struct_type: "Any"
var any_ptr     ptr_type: any
var any_ptr_ptr ptr_type: any_ptr

var void_ptr        ptr_type: int_8       ; i8*
var void_ptr_ptr    ptr_type: void_ptr    ; i8**

var null const_type: "null"
var void const_type: "void"

var return_void return_type: void

var :private label "label "

; Templatized

; For var and literal local declarations
var :private global_null_decl "@`d{}`d = {} %`dAny`d* null, align 8`n"

; For external function declarations
var :private anyptr_name "%`dAny`d* %`d{}`d"
var :private anyptr_tailname ", %`dAny`d* %`d{}`d"
var :private extr_func "declare %`dAny`d* @`d{}`d({})`n"

; For external var declarations
var :private extr_var "@`d{}`d = {} %`dAny`d*, align 8`n"

; Function: ir_stringify
; Description: expand string if ? and *
var :private bang "{}_bang"
var :private pred "{}_qmark"

func :private ir_stringify [s]
    match last: s
    | '?'   format!: pred [dropLast: s]
    | '!'   format!: bang [dropLast: s]
    | :default s

; Dummy writter
func :private dummy_writer [ochan irtype]
    printnl!:
        format!:
            "Writer for {} not implemented yet!"
            [get: irtype :type]

; Simple tostr

func :private simple_name_tostring [irtype]
    format!: get: irtype :declaration [get: irtype :name]

func :private type_tostring [irtype]

    let rts_fn  [] get: irtype :tostring
    (rts_fn irtype)

; Simple writer

func :private simple_name_writer [ochan irtype]
    let tstr_fn [] get: irtype :tostring
    write!: ochan (tstr_fn irtype)

; Invoke writer on arbitrary type

func invoke_writer [ochan irtype]
    let wrt_fn [] get: irtype :writer dummy_writer
    (wrt_fn ochan irtype)

; Simple integer type

func inttype [val]
    {
        :type           :int
        :name           val
        :declaration    "i{}"
        :writer         simple_name_writer
        :tostring       simple_name_tostring
    }

; Pointer types

func :private pointer_tostring [ptype]
    let v       [] get: ptype :valtype
    let vs_fn   [] get: v :tostring
    format!:
        get: ptype :declaration
        [(vs_fn v)]

func :private pointer_writer [ochan ptype]
    write!: ochan pointer_tostring: ptype

func ptr_type [valtype]
    {
        :type           :ptr
        :valtype        valtype
        :declaration    "{}*"
        :writer         pointer_writer
        :tostring       pointer_tostring
    }

func global_reference [name]
    {
        :type           :reference_global
        :name           ir_stringify: name
        :declaration    "@`d{}`d"
        :writer         simple_name_writer
        :tostring       simple_name_tostring
    }

; Reference types

func :private reference_register_type_tostring [ptype]
    let type_wfn [] get: get: ptype :valtype :tostring
    ?: nil?: type_wfn
        failWith: "No :tostring"
        format!:
            get: ptype :declaration
            [
            (type_wfn get: ptype :valtype)
            type_tostring: get: ptype :register]

func :private reference_register_type_writer [ochan ptype]
    write!: ochan
        [reference_register_type_tostring: ptype]

func reference_register_type [valtype regref]
    {
        :type           :reference_register_type
        :valtype        valtype
        :declaration    "{}* {}"
        :register       regref
        :writer         reference_register_type_writer
        :tostring       reference_register_type_tostring
    }

func :private reference_constant_type_tostring [ptype]
    let type_wfn [] get: get: ptype :valtype :tostring
    ?: nil?: type_wfn
        failWith: "No :tostring"
        format!:
            get: ptype :declaration
            [
            (type_wfn get: ptype :valtype)
            type_tostring: get: ptype :value]


func :private reference_constant_type_writer [ochan ptype]
    printnl!: "Writing reference constant"
    write!: ochan
        [reference_constant_type_tostring: ptype]

func reference_constant_type [valtype val]
    {
        :type           :reference_constant_type
        :valtype        valtype
        :declaration    "{} {}"
        :value          val
        :writer         reference_constant_type_writer
        :tostring       reference_constant_type_tostring
    }

; Const types

func const_type [val]
    {
        :type           :constant
        :name           val
        :declaration    "{}"
        :writer         simple_name_writer
        :tostring       simple_name_tostring
    }

func const_reference [val]
    {
        :type           :constant_reference
        :name           val
        :declaration    "%`d{}`d"
        :writer         simple_name_writer
        :tostring       simple_name_tostring
    }

; c"\00"
func const_string_type [val]
    {
        :type           :constant_string_type
        :name           val
        :declaration    "c`d{}\00`d"
        :writer         simple_name_writer
        :tostring       simple_name_tostring

    }
; Comment

func comment_type [val]
    {
        :type           :constant
        :name           val
        :declaration    "`n; {} `n"
        :writer         simple_name_writer
        :tostring       simple_name_tostring
    }

; Literal declaration

func literal_type  [litref]
    {
        :type           :literal
        :name           get: litref NAME
        :ltype          get: litref LITTYPE
        :lval           get: get: litref TOKEN :token_str
        :declaration    "@`d{}`d = private global %`dAny`d* null, align 8`n"
        :writer         simple_name_writer
        :tostring       simple_name_tostring
    }

; Return type

func :private return_tostring [rettype]
    type_tostring: get: rettype :returns

func :private return_writer [ochan rettype]
    write!:
        ochan
        format!:
            get: rettype :declaration
            [return_tostring: rettype]

func return_type [retref]
    {
        :type           :return_type
        :returns        retref
        :declaration    "  ret {}`n}`n"
        :writer         return_writer
        :tostring       return_tostring
    }

; Array types

func :private array_type_tostring [arrtype]
    format!:
        get: arrtype :declaration
        [   get: arrtype :count
            type_tostring: get: arrtype :eltype
        ]

func :private array_type_writer [ochan arrtype]
    let astr_fn [] get: arrtype :tostring
    write!: ochan (astr_fn arrtype)

func array_type [eltype cnt]
    {
        :type           :array_type
        :eltype         eltype
        :count          cnt
        :declaration    "[{} x {}]"
        :writer         array_type_writer
        :tostring       array_type_tostring
    }

func :private   register_type [val]
    {
        :type           :register_type
        :name           val
        :declaration    "%`d{}`d"
        :writer         simple_name_writer
        :tostring       simple_name_tostring
    }

; Function: get_register
; Description: returns the next virtual register identifier
; from type that contains registers (i.e. functions, lambdas)

func :private get_register [container]
    let current [] register_type: get: container :regcount
    map_extend!:
        container
        :regcount
        inc: get: current :name
    current


; Basic block - named container of instructions

func :private bblock_writer [ochan bblock]
    ; Write block label
    simple_name_writer: ochan bblock
    ; Write instructions
    fold: invoke_writer ochan get: bblock :instructions
    ; return channel
    ochan

func basic_block_type [val]
    {
        :type           :basic_block
        :name           val
        :instructions   list_inst!:
        :inst_pos       zero
        :declaration    "{}:`n"
        :writer         bblock_writer
        :tostring       simple_name_tostring
    }

; Generic named type

func named_struct_type [val]
    {
        :type           :structure
        :name           val
        :declaration    "%`d{}`d"
        :writer         simple_name_writer
        :tostring       simple_name_tostring
    }


; External declaration - Applies to extern vars and funcs

func external_variable_type [val]
    {
        :type           :external_var
        :name           ir_stringify: get: val NAME
        :declaration    "@`d{}`d = external global %`dAny`d*, align 8`n"
        :writer         simple_name_writer
        :tostring       simple_name_tostring
    }

func :private anyptr_for [aptrstr r]
    format!: aptrstr [r]

func :private extern_func_writer [ochan efunc]
    write!:
        ochan
        format!:
        get: efunc :declaration
        [
            get: efunc :name
            ?: =: get: efunc :argcnt zero
                " "
                fold:
                    ^[istr ndx]
                        ?: =: ndx zero
                            extend: istr anyptr_for: anyptr_name ndx
                            extend: istr anyptr_for: anyptr_tailname ndx
                    "" series: zero get: efunc :argcnt one]

    ochan

func external_function_type [funcref]
    {
        :type           :external_func
        :name           ir_stringify: get: funcref NAME
        :argcnt         get: funcref ARGCNT
        :declaration    "declare %`dAny`d* @`d{}`d({})`n"
        :writer         extern_func_writer
    }

; Function: function_definition
; Description: Writes the function definition string

func :private function_definition [ochan gft rett]
    ; Write definition
    write!: ochan
        format!:
            get: gft :declaration
            [   get: gft :scope
                rett
                get: gft :name
                ?: =: get: gft :regcount zero
                    ""
                    fold:
                        ^[istr ndx]
                            ?: =: count: istr zero
                                extend: istr anyptr_for: anyptr_name ndx
                                extend: istr anyptr_for: anyptr_tailname ndx
                        "" get: gft :arguments]

; Function: function_writer
; Description: Standard function writer that
; processes expressions and writes out basic blocks

func :private function_writer [ochan gft]
    function_definition: ochan gft get: gft :return_type

    ; Write basic_blocks
    fold: bblock_writer ochan get: gft :basic_blocks

    ; Write return
    let rett [] get: gft :returns
    let ret_fn [] get: rett :writer
    (ret_fn ochan rett)

; Function: global_function
; Description: Standard function w/expressions
;   1. Create "entry:" basic block

func  global_function_type [val prv args rettype retexpr]

    let gf []
            {
                :type           :function
                :name           ir_stringify: val
                :bblocks_map    map_inst!:
                :basic_blocks   list_inst!:
                :arguments      args
                :scope          ?: prv "private" " "
                :regcount       ?: empty?: args
                                    two
                                    count: args
                :return_type    rettype
                :returns        retexpr
                :declaration    ?: =: retexpr return_void
                                    "`ndefine {} {} @`d{}`d({}) {`n"
                                    "`ndefine {} %{} @`d{}`d({}) {`n"
                :writer         function_writer
            }

    list_extend!: get: gf :basic_blocks basic_block_type: "entry"
    map_extend!: get: gf :bblocks_map "entry" zero
    gf


func :private funcref_tostring [irtype]
    let acnt [] get: irtype :argcnt
    format!:
        get: irtype :declaration
        [
            type_tostring: get: irtype :return_type
            ?: =: acnt zero
                ""
                fold:
                    ^[istr ndx]
                        ?: =: count: istr zero
                            extend: istr "%`dAny`d*"
                            extend: istr ", %`dAny`d*"
                    "" series: zero acnt one
            type_tostring: get: irtype :name
        ]

func :private funcref_writer [ochan irtype]
    write!: ochan funcref_tostring: irtype
    ochan

func funcref_type [name rettype argcnt]
    {
        :type           :function_ref
        :name           global_reference: ir_stringify: name
        :argcnt         argcnt
        :declaration    "{} ({})* {}"
        :return_type    rettype
        :writer         funcref_writer
        :tostring       funcref_tostring
    }

; Function: get_basic_block
; Description: Returns the named basic block after
; finding the index from the bblock map

func get_basic_block [function block_name]
    get:
        get:
            function
            :basic_blocks
        get:
            get: function :bblocks_map
            block_name

func get_last_block [function]
    last: get: function :basic_blocks

func get_last_instruction_oftype [bblock itype_set]
    fold:
        ^[acc el]
            ?: get: itype_set get: el :type
                el
                acc
        nil get: bblock :instructions

; Function: global_variable_type
; Description: Declares a module local variable, may be private or not
; The body of the variable is set in the 'modulename_vinits' function

func :private variable_writer [ochan gvt]
    write!:
        ochan
        format!:
            get: gvt :declaration
            [
                get: gvt :name
                ?: get: gvt :private
                    "private global"
                    "default global"
                ]

func global_variable_type [variable]
    map_extend!:
        {
            :type           :variable
            :name           ir_stringify: get: variable NAME
            :expressions    get: variable EXPRS
            :private        get: variable IS_PRIVATE
            :declaration    "@`d{}`d = {} %`dAny`d* null, align 8`n"
        }
        :writer variable_writer

; Instructions
; Most cases increment the function (context) :regcount
func :private instr []
    {
        :type           :instruction
        :ident          nil
        :declaration    nil
        :writer         dummy_writer
    }

func :private instr_result []
    map_extend!:
        instr:
        :description  "%{} = {}"


; Function: two_var_writer
; Description: writer that formats for two values

func :private two_var_writer [fval sval ochan irtype]
    let sval_t [] get: irtype sval
    let svalts_fn [] get: sval_t :tostring false
    ?: svalts_fn
        nil
        exception:
            format!:
                "Type {} does not have :tostring function"
                [get: sval_t :type]
    write!:
        ochan
        format!:
            get: irtype :declaration
            [type_tostring: get: irtype fval
            (svalts_fn sval_t)]
    ochan

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Instructions
; they return their type
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Function: base_alloca
; Description: Base allocation instruction

func :private base_alloca [res type]
    {
        :type           :alloca
        :register       res
        :atype          type
        :declaration    "  {} = alloca {}`n"
        :writer         (two_var_writer :register :atype)
    }

; Function: alloca
; Description: allocates a local stack area using
; a virtual register which progresses the function

func alloca [function type]
    base_alloca:
        get_register: function
        type

; Function: named_alloca
; Description: allocates a local stack area using
; a named register

func named_alloca [name type]
    base_alloca:
        name
        type

;%".3" = bitcast [54 x i8]* %".2" to i8*
;%".4" = bitcast [54 x i8]* %".2" to [24 x i8]*

; Function: bitcast
; Description: bitcasts from_ptr to to_ptr

func :private bitcast_writer [ochan bctype]

    let reg [] type_tostring: get: bctype :register
    let to  [] type_tostring: get: bctype :to
    let from  [] type_tostring: get: bctype :from
    write!:
        ochan
        format!: get: bctype :declaration [reg from to]
    ochan


func bitcast [function from_ptr to_ptr]
    {
        :type           :bitcast
        :register       get_register: function
        :from           from_ptr
        :to             to_ptr
        :declaration    "  {} = bitcast {} to {}`n"
        :writer         bitcast_writer
    }

; Function: store
; Description: stores one type to another
; store %"Any"* %".318", %"Any"** @"ir_types_KEYWORD_43"

func :private store_writer [ochan strtype]
    write!:
        ochan
        format!:
            get: strtype :declaration
            [
                type_tostring: get: strtype :arg1
                type_tostring: get: strtype :arg2
            ]
    ochan

func store [from_ref to_ref]
    {
        :type           :store
        :arg1           from_ref
        :arg2           to_ref
        :declaration    "  store {}, {} `n"
        :writer         store_writer
    }

; Function: load
; Description: loads a register from location
; %".29" = load %"Any"*, %"Any"** @"ir_types_STRING_35"

func :private load_writer [ochan strtype]
    write!:
        ochan
        format!:
            get: strtype :declaration
            [
                type_tostring: get: strtype :register
                type_tostring: get: strtype :register_type
                type_tostring: get: strtype :from
            ]
    ochan

func load [function regtype from_ref]
    {
        :type           :load
        :register       get_register: function
        :register_type  regtype
        :from           from_ref
        :declaration    "  {} = load {}, {} `n"
        :writer         load_writer
    }

func :private call_tostring []

func :private call_writer [ochan irtype]
    let args [] get: irtype :args
    write!:
        ochan
        format!:
        get: irtype :declaration
        [
            type_tostring: get: irtype :register
            type_tostring: get: irtype :name
            ?: =: count: args zero
                " "
                fold:
                    ^[istr ndx]
                        ?: =: ndx zero
                            extend: istr type_tostring: get: args ndx
                            extend: istr
                                format!:
                                    ", {}"
                                    [type_tostring: get: args ndx]
                    "" series: zero count: args one]

    ochan

; %".6" = call %"Any"* @"foidl_reg_string"(i8* %".3")
func call [function call_site args]
    {

        :type           :call
        :register       get_register: function
        :name           call_site
        :declaration    "  {} = call %`dAny`d* {}({})`n"
        :args           args
        :writer         call_writer
    }


func branch []
func unconditional_branch []
func label_type [astel suffix]
func function_type [function]
func lambda_type [lambda]
