;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ir_types
; LLVM Generation
;
; Copyright (c) Frank V. Castellucci
; All Rights Reserved
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

module ir_types
include langcorem

include ast_type
include errors

; Integer types
var int_64  inttype: 64
var int_32  inttype: 32
var int_8   inttype: 8

; Well knowns
var any         named_struct_type: "Any"
var any_ptr     ptrtype: any
var any_ptr_ptr ptrtype: any_ptr

var void_ptr        ptrtype: int_8         ; i8*
var void_ptr_ptr    ptrtype: void_ptr  ; i8**

var null consttype: "null"
var void consttype: "void"

var :private label "label "

; Templatized

var :private comment "`n; {} `n"

; For var and literal local declarations
var :private global_null_decl "@`d{}`d = {} %`dAny`d* null, align 8`n"

; For external function declarations
var :private anyptr_name "%`dAny`d* %`d{}`d"
var :private anyptr_tailname ", %`dAny`d* %`d{}`d"
var :private extr_func "declare %`dAny`d* @`d{}`d({})`n"

; For external var declarations
var :private extr_var "@`d{}`d = {} %`dAny`d*, align 8`n"

; Function: ir_stringify
; Description: expand string if ? and *
var :private bang "{}_bang"
var :private pred "{}_qmark"

func :private ir_stringify [s]
    match last: s
    | '?'   format!: pred [dropLast: s]
    | '!'   format!: bang [dropLast: s]
    | :default s

; Base types creation

func inttype [val]
    map_extend!:
        {
            :type   :int
        }
        :str  format!: "i{}" [val]


func ptrtype [val]
    map_extend!:
        {
            :type   :ptr
        }
        :str  format!: "{}*" [get: val :str]

func named_struct_type [val]
    map_extend!:
        {
            :type   :structure
        }
        :str   format!: "%`d{}`d" [val]

func consttype [val]
    map_extend!:
        {
            :type   :constant
        }
        :str    val

; Basic block - named container of instructions

func basic_block [val]
    map_extend!:
        {
            :type           :basic_block
            :instructions   list_inst!:
            :inst_pos       zero
        }
        :str    format!: "{}:" [val]

; External declaration - Applies to extern vars and funcs
; Local declarations - Applies to private literals and private/general vars

; Function: global_function
; Description: Instantiates a function
;   1. Create "entry:" basic block
;   2. If return is nil, set constant void

;func  global_function [val args rettype]
;    let gf [] map_extend!:
;                {
;                    :type           :function
;                    :basic_blocks   map_inst!:
;                }


; Function: external_function
; Description: External function declaration
func :private anyptr_for [aptrstr r]
    format!: aptrstr [r]

func external_function [funcref]
    format!:
        extr_func
        [
            ir_stringify: get: funcref NAME
            ?: =: get: funcref ARGCNT zero
                " "
                fold:
                    ^[istr ndx]
                        ?: =: ndx zero
                            extend: istr anyptr_for: anyptr_name ndx
                            extend: istr anyptr_for: anyptr_tailname ndx
                    "" series: zero get: funcref ARGCNT one]

; Function: comment_type
; Description: Formats a comment instruction

func comment_type [s]
    format!: comment [s]

; Function: literal_type
; Description: Local, private, literal declarations

func literal_type [literal]
    format!: global_null_decl [get: literal NAME "private global"]

; Function: external_variable
; Description: External variable declaration

func external_variable [varref]
    format!: extr_var [ir_stringify: get: varref NAME "external global"]

; Function: variable_type
; Description: Local variable declarations

func variable_type [variable]
    ?: get: variable IS_PRIVATE
        format!: global_null_decl [ir_stringify: get: variable NAME "private global"]
        format!: global_null_decl [ir_stringify: get: variable NAME "default global"]

func branch []
func unconditional_branch []
func array_type []
func label_type [astel suffix]
func function_type [function]
func lambda_type [lambda]
