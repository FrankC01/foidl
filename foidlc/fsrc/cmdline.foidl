;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; cmdline
; Command line parsing
;
; Copyright (c) Frank V. Castellucci
; All Rights Reserved
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

module cmdline

include argparse
include langcorem

; These commands expect arguments following the command switch
; We use the argparse utility handler functions, we could have defined
; our own handler and pass it's reference as well


var :private compile_cmd {
    :help       "Generate LLLVM from input source"
    :keyword    :compile
    :handler_fn argparse_singlevalue
    :unexpected "-c <input file> Command requires input file name"
    :conflicts  ["-g"]
}

var :private generate_cmd {
    :help       "Generate header file from input source"
    :keyword    :genhdr
    :handler_fn argparse_singlevalue
    :unexpected "-g <input file> Command requires input file name"
    :conflicts  ["-c"]
}

var :private output_cmd {
    :help       "Directs output from -[cg]"
    :keyword    :output
    :handler_fn argparse_singlevalue
    :unexpected "-o <output file> Command requires output file name"
}

var :private include_path_cmd {
    :help       "Sets include paths"
    :keyword    :includes
    :handler_fn argparse_multivalue
    :unexpected "-I expects 1 or more parameters"
}

; These commands are flags only and use the argparse default
; handler that sets keyword result to true if found

var :private building_runtime {
    :help       "Building runtime. Ignore preloading langcore.defs"
    :keyword    :compiling_runtime}

var :private debug_print_tokens {
    :help       "Debug: prints output of lexical scan"
    :keyword    :printtoks}

var :private debug_print_symtree {
    :help       "Debug: prints symbol tree(s) before parsing"
    :keyword    :printsyms}

var :private debug_print_ast {
    :help       "Debug: prints ast genreated"
    :keyword    :printast}

var :private debug_print_ir {
    :help       "Debug: prints LLVM-IR generated"
    :keyword    :printir}

var :private foidlc_version {
    :help       "Displays current version of foidlc"
    :keyword    :version}

; The final base command map for foidlc emulation
var :private foidlc_command_map {
    "-c" compile_cmd
    "-g" generate_cmd
    "-o" output_cmd
    "-I" include_path_cmd
    "-v" foidlc_version
    "-r" building_runtime
    "-pt" debug_print_tokens
    "-ps" debug_print_symtree
    "-pa" debug_print_ast
    "-pi" debug_print_ir
}

; Function: cl_validate
; Description: Takes the parsed command line and validates against conflicts
; and extends for appropriate flags

func :private cl_validate [cmap]
    let rset! [] set_inst!:
    ; If compile flag, add to set
    ?: getd: cmap :compile nil
        extend!: rset! :compile
        nil
    ; If genhdr flag, add to set
    ?: getd: cmap :genhdr nil
        extend!: rset! :genhdr
        nil
    ; Validate -g or -c command
    match ecmap count: rset!
    | 0         map_extend!: cmap :outchannel nil
    | 2         failWith: "Error: -c and -g are mutually exclusive"     ; Both -c and -g
    | :default  let [kres get: cmap first: rset!]                       ; Just right
                        map_extend!:
                            map_extend!: cmap :source kres
                            :command first: rset!

    ; For genhdr warn if invalid switches exist
    match get: ecmap :command
    | :compile  ?: not: get: ecmap :includes
                    @(
                        writes!: cerr "Compilation requires setting include paths"
                        writes!: cerr nlchr
                        fail:
                    )
                    ecmap
    | :genhdr   ?: or: get: ecmap :printsyms
                    or: get: ecmap :printast get: ecmap :printir
                    @(
                        writes!: cerr "Generating header ignores "
                        ?: get: ecmap :printast
                            writes!: cerr "-pa "
                            nil
                        ?: get: ecmap :printir
                            writes!: cerr "-pi "
                            nil
                        ?: get: ecmap :printsyms
                            writes!: cerr "-ps "
                            nil
                        writes!: cerr nlchr
                        ecmap
                    )
                    ecmap
    | :default ecmap

; Function: cmdlineparse
; Description: ingests command line and set expected keys
func cmdlineparse [argv]
    cl_validate: parseargs: rest: argv foidlc_command_map
