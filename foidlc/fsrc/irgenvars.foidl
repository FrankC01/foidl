;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; irgenvars
; LLVM-IR Generation variables
;
; Copyright (c) Frank V. Castellucci
; All Rights Reserved
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

module irgenvars
include foidlrtm

include state
include irgenutils
include irgentypes

func genIRVarExpression [node]
	irExpression: node
	toIRContext: load: nextIROrdCnt: get: node :uid

func genIRVar [node]
	let [	pv 		get: node :private
			sv 		get: getSymbolFor: get: node :fname :fname
			chld 	first: get: node :children ]
		@(
			toIRExterns: defv: sv pv
			match get: node :vtype
				| :literal irExpression: chld
				| :funcref irExpression: chld
				| :varref  irExpression: chld
				| :default genIRVarExpression: chld
			toIRContext: storev: getLastIROrdCnt: sv
		)

func variableIR [acc node]
	?: =: get: node :type :variable
		genIRVar: node
		nil
	acc

func varStackIRCnt [acc node]
	?: =: get: node :type :variable
		fold: stackAllocCount acc get: node :children
		acc

func varAllocs [acc node]
	toIRContext: alloca: node
	acc

func genIRVariables [ast]
	foidl_extendKV!: irBase! :ordcnt one
	foidl_extendKV!: irBase! :context toIRVarInit
	let [ 	acnt fold: varStackIRCnt one get: ast :children
	       	lcnt getIROrdCnt: ]
    	?: >: -: lcnt one zero
			fold: varAllocs nil series: one inc: acnt  nil
			nil
	fold: variableIR nil get: ast :children

