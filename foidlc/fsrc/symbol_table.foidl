;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; symbol_table
; Compilation symbol_table
;
; Copyright (c) Frank V. Castellucci
; All Rights Reserved
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

module symbol_table
include langcorem

include token_utils

; The symbol_table establishes an overall compilation context that
; supports pushes and pops to a table list of scoped symbol tables,
; which are associative data structures
;
; st_context {
;   :name   string           ; Compilation unit
;   :stack  stack of tables  ; See tables below push/pop front
; }
;
;  talble {
;   :name   string          ; Module name
;   :table  map             ; key:symbol value:reference
; }
;
;  reference {
;   :symbol string          ; Reference symbol
;   :table  {}              ; An AST varref or funcref type
; }
;

; Root symbol table st_context

var :private st_context map_inst!:

; Utility functions

func :private print_table [table]
    fold:
        ^[acc entry]
            @(
                print!: key: entry
                print!: "   "
                printnl!: value: entry)
        nil table

func dump_symbols []
    fold:
        ^[acc entry]
            @(
                print!: nlchr
                print!: "Symbol Table " printnl!: get: entry :name
                printnl!: "---------------------------------------"
                print_table: get: entry :table
            )
        nil get: st_context :stack

; Function: is_name_unique
; Description: Scans st_context stack looking for match on name
; Syntax: is_name_unique: name
;   name    - name of stack entry to search

func :private is_name_unique [name]
    fold:
        ^[acc entry]
            ?: =: name get: entry :name
                reduced: true
                false
        false get: st_context :stack

func :private reverse_lookup [symbol_name acc entry]
    let [name get: entry :name
         etab get: entry :table
         hit get: etab symbol_name]
        ?: nil?: hit
            acc
            reduced: hit

; Function: reference_for
; Description: Returns symbol reference for name
; Syntax: reference_for: symbol_name
;   symbol_name - symbol being search for

func :private reference_for [symbol_name]
    fold: (reverse_lookup symbol_name)
        ;^[acc entry]
        nil get: st_context :stack

; Function: add_to_current
; Description: Insert entry into top of stack symbol table
; Syntax: add_to_current: symbol_name reference
;   symbol_name - symbol being inserted
;   reference - caller defined reference data

func :private add_to_current [symbol_name reference]
    map_extend!:
        get:
            first: get: st_context :stack
            :table
        symbol_name reference

; Function: st_compilation_unit
; Description: Establishes the compilation unit st_context
; for symbol management. If not already existing, sets
; name and creates a mutable list (for pushing and popping)
; Syntax: st_compilation_unit: name
;   name - String for st_context name

func st_compilation_unit [name]
    ?: empty?: st_context
        map_extend!:
            map_extend!: st_context :name name
            :stack list_inst!:
        failWith: "Symbol Table st_context already initialized"

; Function: st_push_table
; Description: Push/create a new table to the
; st_context symbol table list.
; Syntax: st_push_table: name
;   name - String for st_context name

func st_push_table [name]
    ; Search on collision of name
    let hit [] is_name_unique: name
    ; If not true, push new table on stack
    ?: not: hit
        let [stab map_inst!:]
            push!:
                get: st_context :stack
                map_extend!:
                    map_extend!: stab :name name
                    :table map_inst!:
        ; Collision - exit
        failWith: extend: "Symbol table already exists for " name

; Function: st_pop_table
; Description: Pop the top of the stack entries
; Syntax: st_pop_table:

func st_pop_table []
    ?: =: count: get: st_context :stack zero
        failWith: "Attempting to pop empty symbol stack"
        pop!: get: st_context :stack

func :private except_and_fail [sref symbol_name reference]
    write!: cerr "Exception: Symbol '"
    write!: cerr symbol_name
    write!: cerr "' in "
    write!: cerr get: reference :source
    write!: cerr source_pos_to_str: get: reference :token
    write!: cerr " already declared in "
    write!: cerr get: sref :source
    write!: cerr source_pos_to_str: get: sref :token
    ;write!: cerr source_pos_to_str: get: sref :token
    write!: cerr nlchr
    fail:

func :private warn_and_add [sref symbol_name reference]
    write!: cerr "Warning: '"
    write!: cerr symbol_name
    write!: cerr "' in "
    write!: cerr get: reference :source
    write!: cerr source_pos_to_str: get: reference :token
    write!: cerr " redefines same symbol named in "
    write!: cerr get: sref :source
    write!: cerr source_pos_to_str: get: sref :token
    write!: cerr nlchr
    add_to_current: symbol_name reference

; Function: st_add_symbolref
; Description: Puts a symbol in current stack top table
; Syntax: st_add_symbolref: symbol_name reference
;   symbol_name - string
;   reference   - AST reference type

func st_add_symbolref [symbol_name reference]
    let sref [] reference_for: symbol_name
    ; If the ref found is in the same stack it is an error
    ?: nil?: sref
        add_to_current: symbol_name reference
        ?: not: =: get: reference :source get: sref :source
            warn_and_add: sref symbol_name reference
            except_and_fail: sref symbol_name reference

