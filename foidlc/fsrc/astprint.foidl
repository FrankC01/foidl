;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; astprint
; AST Pretty Printer
;
; Copyright (c) Frank V. Castellucci
; All Rights Reserved
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

module astprint

func printItem [pre tag item]
	print!: pre
	print!: tag
	print!: " "
	printnl!: item

func pastLet [pre node]
	printItem: pre :result get: node :result

func pastCall [pre node]
	let [ cr get: node :reference ]
		@(
			printItem: pre :reference get: cr :fname
			printItem: pre :argcnt get: cr :argcnt
		)

func pastFold  [accum node]
	printItem: accum :type get: node :type
	printItem: accum :context get: node :context
	printItem: accum :fname get: node :fname
	printItem: accum :uid get: node :uid
	printItem: accum :refid get: node :refid
	printItem: accum :private get: node :private

	match get: node :type
		| :match printItem: accum :result get: node :result
		| :matchpredref
			printItem: accum :predref get: get: node :predref :uid
		| :let @(
						pastLet: accum node
						pastFold: accum get: node :args
						)
		| :literal printItem: accum :subtype get: node :subtype
		| :call pastCall: accum node
		| :function pastFold: extend: accum "fa" get: node :args
		| :lambda pastFold: extend: accum "la" get: node :args
		| :collection
					@(
						printItem: accum :count get: node :count
						printItem: accum :subtype get: node :subtype
					)


	fold: pastFold extend: accum "->" get: node :children
	accum

func pastLambdaFold  [accum node]
	printItem: accum :type get: node :type
	printItem: accum :context get: node :context
	printItem: accum :fname get: node :fname

	match get: node :type
		| :let @(
					pastLet: accum node
					pastFold: accum get: node :args
				)
		| :call pastCall: accum node
		| :function pastFold: extend: accum "fa" get: node :args
		| :lambda pastFold: extend: accum "la" get: node :args


	fold: pastFold extend: accum "->" get: node :children
	accum

func astMapFold [accum node]
	printItem: accum key: node value: node
	accum

func astPrint [node]
	?: =: get: node :type :module
		@(
			printnl!: "Externs"
			fold: astMapFold "e> " get: node :externs
			printnl!: "Literals"
			fold: astMapFold "l> " get: node :literals
			printItem: "> " :type get: node :type
			printItem: "> " :context get: node :context
			fold: pastLambdaFold " >|" get: node :lambdas
		)
		nil
	fold: pastFold " >|" get: node :children

