;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; foidlc
; Compiler entry point
;
; Copyright (c) Frank V. Castellucci
; All Rights Reserved
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

module foidlc

include langcorem

include cmdline
include lexer

include foidlc_utils
include genhdr
include state
include tvalidate
include symbolmgmt
include incproc
include astgen
include astprint
include irgen
include emit

;func failEnvironment [src elm]
;	write!: cerr "Unable to resolve "
;	write!: cerr elm
;	write!: cerr " in environment settings"
;	write!: cerr nlchr
;	fail:

func foldTDump [acc val]
	printnl!: val
	val

func printTokens [tokens]
	fold: foldTDump nil tokens
	print!: "Total tokens produced = "
	printnl!: count: tokens

func hdrCompile [cmap tokens]
	genhdr: get: cmap :outchannel tokens

func standardHdrFold [accum val]
	extend!: accum val

func fullCompile [cmap tokens]
	fold: subsMain nil tokens
	processIncludes: get: cmap :includes
		filterIncludes: tokens fold: standardHdrFold <> hdrPreDefs
	valSyntax: tokens
	let [	ast 	genAst:
		   	ir  	genIR: ast ]
		@(
			?: get: cmap :printast
				astPrint: ast
				nil
			?: get: cmap :printir
				irPrint: ir
				nil
			emit: get: cmap :outchannel ir
		)

func :private process [cmap tokens]
	;prepareOutput: cmap get: first: tokens :lexeme tail
	;	Debugging aid
	;?: get: cmap :printtoks
	;	printTokens: tokens
	;	nil
	; Real deal
	;?: get: cmap :genhdr
	;	hdrCompile: cmap tokens
	;	?: get: cmap :compile
	;		fullCompile: cmap tokens
	;		nil
	; Close it up
	;endCompile: cmap

func :private execute [argv cmap]
	?: get: cmap :version
		printnl!: version
		?: get: cmap :source
			; Lex for tokens, ignoring comments and validate module position
			let [tokens lex: get: cmap :source #{:comment}
			 	 mname_tok module_name_validation: tokens]
			 	 ; Process the tokens
			 	 process:
			 	 	extendKV: cmap :module_name get: mname_tok :token_str
					tokens
			@(
				write!: cerr "Exception: Command line makes no sense: "
				write!: cerr rest: argv
				write!: cerr nlchr
				fail:
			)


func main [argv]
	execute: argv cmdlineparse: argv
