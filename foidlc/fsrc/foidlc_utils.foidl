;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; foidl_utils
; Compiler utilities
;
; Copyright (c) Frank V. Castellucci
; All Rights Reserved
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

module foidlc_utils

include langcorem

var version "foidl bootstraped compiler version 0.01.00"
var hdrPreDefs <"foidlrt" "langcore">

;	Miscellaneous functions for compiler initialization

func module_name_validation [tokens]
	let [first_tok first: tokens
		 mname_tok second: tokens]
		?: and: =: get: first_tok :token_type :module
				=: get: mname_tok :token_type :symbol
			mname_tok
			@(
				write!: cerr "Exception: A valid module statement must be first, found "
				write!: cerr get: first_tok :token_type
				write!: cerr " "
				write!: cerr get: mname_tok :token_str
				write!: cerr nlchr
				fail:
			)


func subsMain [acc token]
	?: =: get: token :type :function
		?: =: get: token :lexeme "main"
			map_extend!: token :lexeme "user_main"
			nil
		nil
	acc

func buildOutName  [base isdir mname tail]
	?: =: isdir divchr
		extend: extend: base mname tail
		extend: base tail

func prepareOutput [cmap mname tail]
	?: get: cmap :output
		let [outp 	get: cmap :output]
			map_extend!: cmap :outchannel
					open!: {
						:channel buildOutName: outp last: outp mname tail
						:open :w
						:buffer :block
						:write_handler :char }
		map_extend!: cmap :outchannel cout

func endCompile [cmap]
	?: =: get: cmap :outchannel cout
		nil
		close!: get: cmap :outchannel


