;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; parse_utils
; Parse utilities
;
; Copyright (c) Frank V. Castellucci
; All Rights Reserved
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

module parse_utils

include langcorem
include ast_type
include token_utils
include symbol_table


func add_nil_expr [node]
    ?: =: count: get: node EXPRS zero
        extend!: get: node EXPRS st_lookup: "nil"
        failWith: "Attempt to add nil to populated list"
    node

; Function: process_for_private
; Description: Used by vars and funcs which have
; optional ':private' modifier on declaration
; Syntax: process_for_private: node ast_tree

func process_for_private [node ast_tree]
    let pnode [] first: ast_tree
    let vpsym [] get: pnode TYPE
    ?: =: vpsym :private
        @(
            map_extend!: node IS_PRIVATE true
            pop!: ast_tree
            let [vvsym get: first: ast_tree NAME]
                map_extend!: node NAME vvsym
        )
        map_extend!: node NAME get: pnode NAME
    pop!: ast_tree

; Function:
; Description:
; Syntax:

func :private index_to_reduction [ast_tree pred_fn res ndx]
    ?: (pred_fn get: ast_tree ndx)
        reduced: ndx
        res

; Function:
; Description:
; Syntax:

func index_to_type [ast_tree pred_fn]
    fold:
        (index_to_reduction ast_tree pred_fn)
        zero series: zero count: ast_tree one


; Function: until_pred
; Description: Iterates until predicate reduces
; Syntax:

func until_pred [foreach_fn init]
    fold: foreach_fn init infinite


var :private math_ref_lookup {
    '+'     "add"
    '-'     "sub"
    '/'     "div"
    '*'     "mul"
}

func parse_mathref [token_str]
    let lu []
        st_lookup:
            get: math_ref_lookup
            first: token_str

; Collection type support

var :private coll_lookup {
    :lbracket   :rbracket
    :lbrace     :rbrace
    :lset       :rbrace
    :langle     :rangle
}

var :private coll_type {
    :lbracket   :list
    :lbrace     :map
    :lset       :set
    :langle     :vector
}

; Function: ttype_pred
; Description: Predicate used during expression
; building that tests if passed in token type of
; endtype
; Syntax:

func :private ttype_pred [endtype tok]
    =: get: tok :token_type endtype

; Function: for_each_collelem
; Description: Process each ast_tree expression until
; predicate returns true
; Syntax:

func :private for_each_collelem [pred_fn ast_tree node indx]
    let n [] first: ast_tree
    ?: (pred_fn n)
        reduced: node
        @(
            pop!: ast_tree
            list_extend!: get: node EXPRS n
            node
        )

; Function: for_each_expr_excpt
; Description: Collects expression until end_fn returns true
; or if excp_fn throws a type issue (typically)

func :private for_each_expr_excpt [end_fn excp_fn ast_tree node indx]
    ; If the
    let n [] first: ast_tree
    ?: (end_fn n)
        reduced: node
        @(
            (excp_fn n)
            pop!: ast_tree
            list_extend!: get: node EXPRS n
            node
        )

; Function: parse_collection
; Description: Processing a collection by locating it's
; companion closing token and inferencing type and
; collecting elements. Maps have a modulo 2 test
; Syntax:

func parse_collection [stok ast_tree srcname]

    let stype [] get: stok :token_type
    let tail [] get: coll_lookup stype
    let ctype [] get: coll_type stype
    let pred_fn [] (ttype_pred tail)
    let tindx [] index_to_type: ast_tree pred_fn
    let node []
        ?: =: tindx zero
            map_extend!:
                type_with_exprs: :empty_collection srcname stok
                COLLTYPE ctype
            until_pred:
                (for_each_collelem pred_fn ast_tree)
                map_extend!:
                    type_with_exprs: :collection srcname stok
                    COLLTYPE ctype

    ?: and: =: get: node TYPE :collection =: get: node COLLTYPE :map
        ?: =: mod: count: get: node EXPRS two zero
            nil
            @(
                fail_token_header: stok
                write!: cerr "Map requires even pairs"
                write!: cerr nlchr
                fail:
            )
        nil

    pop!: ast_tree  ;   Get rid of tail
    node


func :private invalid_arglist [fnode node]
    let tok [] get: fnode :token
    fail_token_header: tok
    write!: cerr " function "
    write!: cerr get: fnode NAME
    write!: cerr " expects arglist [...]"
    write!: cerr nlchr
    fail:

func :private invalid_arg [fnode node]
    let tok [] get: fnode :token
    fail_token_header: tok
    write!: cerr " function "
    write!: cerr get: fnode NAME
    write!: cerr " expects symbols in arglist. Found "
    write!: cerr get: node TYPE
    write!: cerr nlchr
    fail:

; Function:
; Description:
; Syntax:

func :private verify_symbol_list [fnode node]
    ?: =: get: node TYPE :empty_collection
        node
        let [exprs get: node EXPRS]
            fold: ^[res el]
                ?: =: get: el TYPE :symbol
                    res
                    invalid_arg: fnode el
                node exprs

; Function: verify_func_args
; Description: Checks that argsig exists, and if not empty
; verify all are symbols then set in node after removing
; from ast_tree.

func verify_func_args [node ast_tree]
    let ifla [] is_funclambda_args?: first: ast_tree
    ?: ifla
        map_extend!:
            node
            ARGLIST
            verify_symbol_list: node first: ast_tree
        invalid_arglist: node first: ast_tree
    pop!: ast_tree


; Function: is_next_nil_or_decl?
; Description: Determines if first item in list is nil
; or a module, include, var or func declaration
; Syntax:

func is_next_nil_or_decl? [list_coll]
    let nval [] first: list_coll
    or: nil?: nval is_decl: nval

; Function: for_each_expr
; Description: Consumes expression until end or
; declaration found. If end or declaration, puts
; a 'nil' expression in nodes expressions

func :private for_each_expr [node ast_tree res ndx]

    ?: is_next_nil_or_decl?: ast_tree
        ?: =: count: get: node EXPRS zero
            reduced: add_nil_expr: node
            reduced: node
        @(
            list_extend!: get: node EXPRS first: ast_tree
            pop!: ast_tree
            node
        )

; Function: get_func_exprs
; Description: Get all expressions until next declaration or
; end of list

func get_func_exprs [node ast_tree]
    until_pred:
        (for_each_expr node ast_tree)
        node

; Function: get_var_expr
; Description: Get a single expression or nil expression
; if ast is end (nil) or another declaration put the
; 'nil' expression in the nodes expression list

func get_var_expr [node ast_tree]
    ?: is_next_nil_or_decl?: ast_tree
        add_nil_expr: node
        @(
            list_extend!: get: node EXPRS first: ast_tree
            pop!: ast_tree
            node
        )

; Function: get_single_expr
; Description: Gets a single expression or fails if none found

func get_single_expr [node ast_tree]
    ?: is_next_nil_or_decl?: ast_tree
        @(
            fail_token_header: get: node :token
            write!: cerr " expected a single expression to follow "
            write!: cerr nlchr
            fail:
        )
        @(
            list_extend!: get: node EXPRS first: ast_tree
            pop!: ast_tree
            node
        )

func :private validate_expressions [mnode estr pred_fn acc node]
    ?: and: node not:  (pred_fn node)
        list_extend!: acc node
        @(
            fail_token_header: get: mnode :token
            write!: cerr estr
            write!: cerr nlchr
            fail:
        )


; Function: parse_if
; Description: Parse 3 expressions ensuring non are
; nil or a declaration

func parse_if [node ast_tree]
    let if_expr [] [first: ast_tree, second: ast_tree, get: ast_tree two]
    fold:
        (validate_expressions
            node
            " incomplete if statement. Requires three (3) expressions."
            decl_or_guard)
        get: node EXPRS if_expr
    drop!: ast_tree three

; Function: excp_if_in_typeset
; Description: Throws exception if node AST type
; is in typeset

func :private excp_if_in_typeset [pnode typeset node]
    ?: get: typeset get: node TYPE
        @(
            let tok [] get: node TOKEN
            fail_token_header: tok
            write!: cerr get: pnode TYPE
            write!: cerr " does not expect type "
            write!: cerr get: node TYPE
            write!: cerr nlchr
            fail:
        )
        node

; Function: parse_partial
; Description: Parse expressions ensuring non are
; nil, declaration or match_guards

func parse_partial [stok srcname node ast_tree]
    let pred_fn [] (ttype_pred :rparen)
    let tindx [] index_to_type: ast_tree pred_fn
    match tindx
        | zero      fail:
        | :default  until_pred:
                        (for_each_expr_excpt
                            pred_fn
                            (excp_if_in_typeset
                                node
                                #{:match_guard :function :variable :include :module})
                            ast_tree)
                            node

    pop!: ast_tree



; Exception... TODO - Need string formatter

func :private invalid_match_let [node s]
    fail_token_header: get: node :token
    write!: cerr s
    write!: cerr nlchr
    fail:

; Function: while_guard
; Descriptions: Get next object from ast_list and if
; nil or not a match_guard, exit. Otherwise if it
; is a default match guard, ensure it goes to end otherwise
; if normal then put in expression list

func :private while_guard [ast_tree defhit match_exprs ndx]
    let nxt [] first: ast_tree
    ?: nil?: nxt
        reduced: match_exprs
        ?: =: get: nxt TYPE :match_guard
            let [ign pop!: ast_tree]
                ?: get: nxt IS_DEFAULT
                    @(
                        list_extend!: defhit nxt
                        match_exprs
                    )
                    @(
                        list_extend!: match_exprs nxt
                    )
            reduced: match_exprs


; Function: add_default_guard
; Description: Adds a default match guard to the match
; expression list

func :private add_default_guard [mnode]
    let srcname [] get: mnode SOURCE
    let token []  get: mnode TOKEN
    let nilref [] st_lookup: "nil"
    let defref [] type_instance: :match_default srcname token
    let mguard [] type_with_exprs: :match_guard srcname token
    let exprl []  get: mguard EXPRS
    let mexprs [] get: mnode EXPRS

    map_extend!: mguard IS_DEFAULT true
    list_extend!: list_extend!: exprl defref nilref
    list_extend!: mexprs mguard


; Function: parse_match
; Description: match has form:
;   match symbol? expression [match_guard]+

func parse_match [node ast_tree]
    ; Get the index to the guards
    let mgindx []
        index_to_type:
            ast_tree
            ^[n]
                or: nil?: n =: get: n TYPE :match_guard

    ; Error check
    match mgindx
        | zero  invalid_match_let: node " no match guards found"
        ; Expression, no result symbol TODO: Make psuedo name
        | one   @(
                    map_extend!:
                        node
                        PREDICATE first: ast_tree
                )
        ; Result symbol and expression
        | two   ?: =: get: first: ast_tree TYPE :symbol
                    @(
                        map_extend!:
                            node
                            NAME get: first: ast_tree NAME
                        pop!: ast_tree
                        map_extend!:
                            node
                            PREDICATE first: ast_tree
                    )
                    invalid_match_let: node " match result requires symbol"
        ; Invalid entries between 'match' and first guard
        | :default  invalid_match_let: node " match invalid form"
    pop!: ast_tree
    let tail_list [] list_inst!:
    until_pred: (while_guard ast_tree tail_list) get: node EXPRS

    match count: tail_list
    | 0     add_default_guard: node
    | 1     list_extend!: get: node EXPRS get: tail_list zero
    | 2     @(
                write!: cerr "Only 1 default allowed in match expression"
                fail:
            )
    node


; Function: parse_match_guard
; Description: Parse 2 expressions ensuring non are
; nil, match_guard or a declaration

func parse_match_guard [node ast_tree]
    let mguard [] [first: ast_tree, second: ast_tree]
    fold:
        (validate_expressions
            node
            " incomplete match guard. Requires two (2) expressions."
            decl_or_guard)
        get: node EXPRS mguard

    drop!: ast_tree two
    ?: =: get: first: mguard TYPE :match_default
        map_extend!: node IS_DEFAULT true
        nil
    node

; Function: parse_let
; Description: Parse 2 expressions ensuring non are
; nil, match_guard or a declaration

func parse_let [node ast_tree]
    ; Check if has result symbol
    let fst [] first: ast_tree
    match get: fst TYPE
        | :symbol
                    @(
                        pop!: ast_tree
                        map_extend!: node NAME fst
                    )
        | :collection
                    nil
        | :empty_collection
                    nil
        | :default
                    invalid_match_let: node " unknown expression in let "
    ; Next should be let local argument collection
    let lpairs [args   first: ast_tree]
         ?: is_colltype?: args
            ?: =: get: args COLLTYPE :list
                @(
                    pop!: ast_tree
                    map_extend!: node ARGLIST args
                    args
                )
                invalid_match_let: node " missing let local pairs signature"
            invalid_match_let: node " let requires local pairs signature"
    ; Let local pairs should be % 2 where first is symbol
    ?: =:  mod: count: get: lpairs EXPRS two zero
        nil
        invalid_match_let: node " let requires even local pairs signature"

    ; Finally, should have 1 expression
    get_single_expr: node ast_tree



