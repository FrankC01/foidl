;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ast_type
; AST type model
;
; Copyright (c) Frank V. Castellucci
; All Rights Reserved
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

module ast_type
include langcorem

include ast_validate

; Make keys standout in source using AST

var EXPRS           :exprs
var IS_PRIVATE      :is_private
var IS_DEFAULT      :is_default
var NAME            :name
var PRED_REFERENCE  :pred_reference
var DECLARATIONS    :exprs
var TOKEN           :token
var SOURCE          :source
var TYPE            :type
var COLLTYPE        :colltype
var ARGCNT          :argcnt
var ELMCNT          :argcnt
var ARGLIST         :arglist
var LITTYPE         :littype
var EXTERNS         :externs
var LITERALS        :literals
var LAMBDAS         :lambdas
var PAIRS           :exprs
var PREDICATE       :predicate
var EVAL            :eval_fn

var :private ast_type {
    ;   Reference types
    :varref  {
        TYPE        :varref
        NAME        nil
        EVAL        ref_validate}
    :funcref {
        TYPE        :funcref
        NAME        nil
        ARGCNT      zero
        EVAL        ref_validate}
    :funcargref {
        TYPE        :funcargref
        NAME        nil
        EVAL        default_validate}
    :lambda_argref {
        TYPE        :lambda_argref
        NAME        nil
        EVAL        default_validate}
    :literalref {
        TYPE        :literalref
        NAME        nil
        LITTYPE     nil
        EVAL        ref_validate}
    :match_exprref {
        TYPE        :match_exprref
        NAME        nil
        EVAL        match_exprref_validate}
    :match_predref {
        TYPE        :match_predref
        NAME        nil
        EVAL        ref_validate}
    :match_resref {
        TYPE        :match_resref
        NAME        nil
        EVAL        ref_validate}
    :let_resref {
        TYPE        :let_resref
        NAME        nil
        EVAL        ref_validate}
    :let_argref {
        TYPE        :let_argref
        NAME        nil
        EVAL        ref_validate}
    ;   Declaration types
    ; module symbol declarations*
    :module   {
        TYPE        :module
        NAME        nil
        EXTERNS     nil
        LITERALS    nil
        LAMBDAS     nil
        DECLARATIONS nil
        EVAL        module_validate}
    ; var :private? symbol expression?
    :variable  {
        TYPE        :variable
        NAME        nil
        IS_PRIVATE  false
        EVAL        variable_validate}
    ; func :private? symbol [symbol*] expression*
    :function  {
        TYPE        :function
        NAME        nil
        ARGLIST     nil
        IS_PRIVATE  false
        EVAL        function_validate}
    ;   Expression types
    ; ^[symbol*] expression?
    :lambda  {
        TYPE        :lambda
        NAME        nil
        ARGLIST     nil
        IS_PRIVATE  true
        EVAL        lambda_validate}
    :lambda_call  {
        TYPE        :lambda_call
        NAME        nil
        EXPRS       nil
        EVAL        default_validate}
    ; symbol: expression*
    :call {
        TYPE        :call
        NAME        nil
        EVAL        call_validate}
    ; match symbol? expression match_guard+
    :match  {
        TYPE            :match
        NAME            nil
        PREDICATE       nil
        PRED_REFERENCE  nil
        EVAL            match_validate}
    ; | pred expr
    :match_guard {
        TYPE        :match_guard
        IS_DEFAULT  false
        EVAL        match_guard_validate}
    ; :match_default
    :match_default {
        TYPE        :match_default
        EVAL        match_default_validate}
    ; let symbol? [let_pair*] expression
    :let  {
        TYPE        :let
        NAME        nil
        ARGLIST     nil
        EVAL        let_validate}
    ; empty expressions or [symbol expression]+
    :let_pairs  {
        TYPE        :let_pairs}
    ; ?: pred expression expression
    :if {
        TYPE        :if
        EVAL        if_validate}
    ; @( expression+ )
    :group   {
        TYPE        :group
        EVAL        group_validate}
    ; (expression+)
    :partial  {
        TYPE        :partial
        EVAL        partial_validate}
    ; [] {} <> #{}
    :empty_collection   {
        TYPE        :empty_collection
        COLLTYPE    nil
        ELMCNT      zero
        EVAL        emptycollection_validate}
    ; [expression+] {expression expression,...} <expression+> #{expression+}
    :collection         {
        TYPE        :collection
        COLLTYPE    nil
        ELMCNT      zero
        EVAL        collection_validate}
    ; symbol
    :symbol   {
        TYPE        :symbol
        NAME        nil
        EVAL        symbol_validate}
    ; :private
    :private  {
        TYPE        :private
        EVAL        default_validate}
}

; Convenience sets for predicates

var collection_set  #{:empty_collection :collection}
var coltype_set     #{:list :map :set :vector}
var littype_set     #{:string :keyword :integer :real_number :hex :bit :char}
var decl_set        #{:function :variable :include :module}
var ref_set         #{:literalref :funcref :varref :funcargref :match_predref}

var name_set #{
    :module
    :function
    :variable
    :symbol
    :lambda
    :call
    :match
    :match_exprref
    :lambda_call}

var invalid_set #{
    :match_guard
    :function
    :variable
    :rparen
    :include
    :module}

; Predicates

func is_decl [node]
    getd: decl_set get: node TYPE false

func is_named? [node]
    getd: name_set get: node TYPE false

func is_ref? [node]
    getd: ref_set get: node TYPE false

func is_colltype? [node]
    getd: collection_set get: node TYPE false

func decl_or_guard [node]
    or: is_decl: node =: get: node TYPE :match_guard

func has_exprs? [node]
    let exp [] get: node EXPRS
    ?: nil?: exp
        false
        ?: =: count: exp zero
            false
            true

func is_not_decl? [node]
    not: getd: decl_set get: node TYPE false

func is_funclambda_args? [node]
    ?: getd: collection_set get: node TYPE false
        ?: getd: coltype_set get: node COLLTYPE false
            true
            false
        false

; Function: type_instance
; Description: Return a new AST type instance. All are imbued
; with source reference (string) and token
; Syntax: type_instance: typekw source token
;   typekw  - The AST type keyword
;   source  - Name of source file
;   token   - The source file token (has sourcepos, etc.)

func :private build_type [acc el]
    map_extend!: acc key: el value: el

func type_instance [typekw source token]
    let typeinst [] fold: build_type {} getd: ast_type typekw nil
    ?: nil?: typeinst
        failWith: extend: "Unrecognized AST type " typekw
        let []
            map_extend!:                               ; Create/Extend new instance with token
                map_extend!: typeinst SOURCE source    ; Create new instance and extend
                TOKEN token

; Function: type_with_exprs
; Description: Imbues an expression list on the AST type node
; Syntax: type_with_exprs: typekw source token
;   typekw  - The AST type keyword
;   source  - Name of source file
;   token   - The source file token (has sourcepos, etc.)

func type_with_exprs [typekw source token]
    let node [] type_instance: typekw source token
    map_extend!: node EXPRS list_inst!:

; Function: type_lambda_call
; Descriptions: Creates a lambda_call with
; expressions pushed to function reference

func type_lambda_call [source token name pargs]
    let node [] type_instance: :lambda_call source token
    map_extend!:
        map_extend!: node EXPRS pargs
        NAME name

; Function: type_literal_ref
; Description: Constructs a literal reference storing the
; base type in modules literal map

var :private littype_name {
    :string         "_STRING_{}"
    :keyword        "_KEYWORD_{}"
    :integer        "_INTEGER_{}"
    :real_number    "_NUMBER_{}"
    :hex            "_HEX_{}"
    :bit            "_BIT_{}"
    :char           "_CHAR_{}"
}

func :private new_lit_entry [ltype token source lmap k]
    let lref []
        map_extend!:
            map_extend!:
                type_instance:
                    :literalref
                    source
                    token
                LITTYPE ltype
            NAME format:
                    get: littype_name ltype
                    [count: lmap]
    map_extend!:
        lmap
        get: token :token_str
        lref
    lref

func type_literal_ref [mmodule token source]
    let ltype [] get: token :token_type
    getd:
        get: get: mmodule LITERALS ltype
        get: token :token_str
        (new_lit_entry ltype token source)

; Function:
; Description:
; Syntax:

func :private gen_literal_map [mnode]
    fold:
        ^[acc x]
            map_extend!: acc x map_inst!:
        map_inst!: littype_set

; Function:
; Description:
; Syntax:

var :private predef_externs [
{
        TYPE        :varref
        NAME        "true"
        EVAL        default_validate
}
{
        TYPE        :varref
        NAME        "false"
        EVAL        default_validate
}
{
        TYPE        :varref
        NAME        "nil"
        EVAL        default_validate
}
{
        TYPE        :funcref
        NAME        "foidl_truthy?"
        ARGCNT      one
        EVAL        default_validate
}
{
        TYPE        :funcref
        NAME        "eq"
        ARGCNT      two
        EVAL        default_validate
}
{
        TYPE        :funcref
        NAME        "map_inst!"
        ARGCNT      zero
        EVAL        default_validate
}
{
        TYPE        :funcref
        NAME        "map_extend!"
        ARGCNT      three
        EVAL        default_validate
}
{
        TYPE        :funcref
        NAME        "set_inst!"
        ARGCNT      zero
        EVAL        default_validate
}
{
        TYPE        :funcref
        NAME        "set_extend!"
        ARGCNT      two
        EVAL        default_validate
}
{
        TYPE        :funcref
        NAME        "vector_inst!"
        ARGCNT      zero
        EVAL        default_validate
}
{
        TYPE        :funcref
        NAME        "vector_extend!"
        ARGCNT      two
        EVAL        default_validate
}
{
        TYPE        :funcref
        NAME        "list_inst!"
        ARGCNT      zero
        EVAL        default_validate
}
{
        TYPE        :funcref
        NAME        "list_extend!"
        ARGCNT      two
        EVAL        default_validate
}

]

func :private extern_fn [mext s]
    map_extend!:
        mext
        get: s NAME
        s

func type_module_create [source token]
    let mnode []
        type_with_exprs: :module source token

    ; Prepare
    map_extend!:
        map_extend!:
            map_extend!:
                mnode
                LITERALS gen_literal_map: mnode
            EXTERNS map_inst!:
        LAMBDAS list_inst!:
    ; Fold in predefines
    fold:
        extern_fn
        get: mnode EXTERNS
        predef_externs

    mnode