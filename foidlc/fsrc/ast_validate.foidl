;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ast_validate
; AST type validation model
;
; Copyright (c) Frank V. Castellucci
; All Rights Reserved
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

module ast_validate
include langcorem

include ast_type
include print_ast
include symbol_table
include errors


; Function: dispatch_fn
; Description: Invokes eval method on ast_node

func :private dispatch_fn [state result ast_node]
    let a_fn [] get: ast_node EVAL
    (a_fn state result ast_node)

; Function: dispatch_ast
; Description: Dispatches validation function
; on each node in expressions

func :private dispatch_ast [state result self]
    fold: (dispatch_fn state) result getd: self EXPRS []

; Function: get_expressions
; Description: Dispatches validation function
; for each member of exprs

func :private get_expressions [state exprs]
    fold: (dispatch_fn state) [] exprs

; Function: insert_symbol_type
; Description: Create a AST element of refkw making
; the name either refname or name of original symbol
; and add to the symbol table in lexical scope

func :private insert_symbol_type [refkw sym refname]
    st_add_symbolref:
        get: sym NAME
        map_extend!:
            type_instance:
                refkw
                get: sym SOURCE
                get: sym TOKEN
            NAME ?: refname refname get: sym NAME
    sym

; Function: add_to_symboltable
; Description: Take a straight list of symbols and store them to
; the symbol table in lexical scope

func :private add_to_symboltable [refkw slist]
    fold:
        ^[fn sym]
            ?: =: get: sym TYPE :symbol
                insert_symbol_type: refkw sym nil
                exception:
                    format:
                        "Attempt to store {} in symbol table"
                        [get: sym TYPE]
       nil slist


; Function: register_extern
; Description: Checks if symbol reference is from this
; compilation source and, if not, adds to the externs
; map

func :private register_extern [state sref]
    ?: =: get: state :module_name get: sref SOURCE
        sref
        @(
            map_extend!:
                get: get: state :ast EXTERNS
                get: sref NAME
                sref
            sref
        )


; Function: default_validate
; Description: Function as placeholder for invoking
; validate function for node

func default_validate [state result self]
    print!:
        format:
            "default_validate on {}.`n" [get: self TYPE]
    result

; Function: module_validate

func module_validate [state result self]
    dispatch_ast: state result self
    print_ast: self

; Function: variable_validate
; Description: Evaluate expression on rhs

func variable_validate [state result self]
    ; TODO: Reclaim old list
    ; list_delete: get: self EXPRS
    map_extend!: self EXPRS
        get_expressions: state get: self EXPRS
    list_extend!: result self


; Function: function_validate
; Description: push/pop symbol_table for args then
; evaluate expressions

func function_validate [state result self]
    st_push_table: get: self NAME
    add_to_symboltable: :funcargref get: get: self ARGLIST EXPRS
    ; TODO: Reclaim old list
    ; list_delete: get: self EXPRS
    map_extend!: self EXPRS
        get_expressions: state get: self EXPRS
    st_pop_table:
    list_extend!: result self

func lambda_validate [state result self]
    printnl!: "Validating lambda"
    result

; Function: call_validate
; Description: Validate function calls

func call_validate [state result self]
    ; TODO: Reclaim old list
    ; list_delete: get: self EXPRS
    map_extend!: self EXPRS
        get_expressions: state get: self EXPRS
    list_extend!: result self

; Let naming templates

var let_no_name_template "let_{}_{}"
var let_name_template "let_{}_{}_{}"

; Function: let_arg_validate
; Description: Validate let args symbol and expression

func :private let_arg_validate [state argexpr acc ndx]
    ?: =: mod: ndx two zero
        @(
            let [ argsym get: argexpr ndx
                  argtok get: argsym TOKEN
                  argname get: argsym NAME]
                insert_symbol_type:
                    :let_argref
                    argsym
                    format:
                        let_name_template
                        [get: argtok :lineno get: argtok :colno argname]
                list_extend!: acc get: argexpr ndx
        )
        dispatch_fn: state acc get: argexpr ndx

; Function: let_validate
; Description: Validate let args (if not empty) and
; expression

func let_validate [state result self]
    let token [] get: self TOKEN
    let letres [] get: self NAME
    let hasname [] not: nil?: letres
    let bfrmt [] [get: token :lineno get: token :colno]
    ?: hasname
        map_extend!:
            self
            NAME format:
                    let_name_template
                    [get: token :lineno get: token :colno get: get: self NAME NAME]
        map_extend!:
            self
            NAME format:
                    let_no_name_template
                    [get: token :lineno get: token :colno]


    ; Create 'let' lexical scope
    st_push_table: get: self NAME
    ; Process let pairs from arglist (if any)
    ; process and put symbols (lhs) into lexical
    ; scope symbols
    let arglist [] get: self ARGLIST
    let argexpr [] get: arglist EXPRS
    let letpairs []
        type_instance: :let_pairs get: arglist SOURCE  get: arglist TOKEN

    map_extend!:
        self
        ARGLIST
        map_extend!:
            letpairs
            EXPRS
            ?: =: count: argexpr zero
                []
                fold: (let_arg_validate state argexpr) list_inst!: series: zero count: argexpr one

    ; TODO: Reclaim old list
    ; list_delete: get: self EXPRS
    ; Process 'let' expression
    map_extend!: self EXPRS
        get_expressions: state get: self EXPRS
    ; Remove 'let' lexical scope
    st_pop_table:
    ; Add result name to now current lexical scope
    ?: hasname
        insert_symbol_type: :let_resref letres get: self NAME
        nil
    list_extend!: result self

; Function: match_validate
; Description: Validates guards and return expressions

func match_validate [state result self]
    printnl!: "Validating match"
    dispatch_ast: state result self
    result

func match_guard_validate [state result self]
    printnl!: "Validating match guard"
    print!: "   " printnl!: self
    result

; Function: if_validate
; Description: Validates pred then else

func if_validate [state result self]
    ; TODO: Reclaim old list
    ; list_delete: get: self EXPRS
    map_extend!: self EXPRS
        get_expressions: state get: self EXPRS
    list_extend!: result self

; Function: group_validate
; Description: Validate expressions in group

func group_validate [state result self]
    ; TODO: Reclaim old list
    ; list_delete: get: self EXPRS
    map_extend!: self EXPRS
        get_expressions: state get: self EXPRS
    list_extend!: result self

; Function: partial_validate
; Description: Validates expressions in partial

var :private invalid_first_arg
    #{:match_guard :literalref :variable :function :module :include}

func partial_validate [state result self]
    ; TODO: Reclaim old list
    ; list_delete: get: self EXPRS
    map_extend!: self EXPRS
        get_expressions: state get: self EXPRS

    ; Check that first arg is usable as partial
    let pexpr [] get: self EXPRS
    ?: =: count: pexpr zero
        list_extend!: result self
        ?: get: invalid_first_arg get: first: pexpr TYPE
            token_exception:
                get: self TOKEN
                "Invalid first arg to partial"
            list_extend!: result self

; Used for assigning foidl representation of
; empty collection types (RTL instantiated)

var :private empty_lookup {
    :list     "empty_list"
    :vector   "empty_vector"
    :map      "empty_map"
    :set      "empty_set"
}

; Function: emptycollection_validate
; Description: Decipher type and resolve to
; langcore 'empty_x' reference

func emptycollection_validate [state result self]
    printnl!: self
    list_extend!:
        result
        st_lookup: get: empty_lookup get: self COLLTYPE

; Function: collection_validate
; Description: Evaluate members of collection we
; don't care about type until we are emitting LLVM

func collection_validate [state result self]
    ; TODO: Reclaim old list
    ; list_delete: get: self EXPRS
    map_extend!: self EXPRS
        get_expressions: state get: self EXPRS
    list_extend!: result self

; Function: ref_validate
; Description: Pass through validation of
; reference types

func ref_validate [state result self]
    list_extend!: result self

; Function: symbol_validate
; Description: Resolves symbol in symbol table and
; registers in external map if resolved from
; external unit (e.g. langcore, etc)

func symbol_validate [state result self]
    let sref [] st_lookup: get: self NAME
    ?: nil?: sref
        token_exception:
            get: self TOKEN
            format:
                "Unable to resolve symbol {}" [get: self NAME]
        list_extend!:
            result
            register_extern: state sref

