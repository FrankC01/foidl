;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ast_validate
; AST type validation model
;
; Copyright (c) Frank V. Castellucci
; All Rights Reserved
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

module ast_validate
include langcorem

include ast_type
include print_ast
include symbol_table
include errors


; Function: dispatch_fn
; Description: Invokes eval method on ast_node

func :private dispatch_fn [state result ast_node]
    let a_fn [] get: ast_node EVAL
    (a_fn state result ast_node)

; Function: dispatch_ast
; Description: Dispatches validation function
; on each node in expressions

func :private dispatch_ast [state result self]
    fold: (dispatch_fn state) result getd: self EXPRS []

; Function: get_expressions
; Description: Dispatches validation function
; for each member of exprs

func :private get_expressions [state exprs]
    fold: (dispatch_fn state) [] exprs

; Function: insert_string_type
; Description: Create a AST element of refkw making
; the name either refname or name of original symbol
; and add to the symbol table in lexical scope

func :private insert_string_type [refkw s source token refname]
    st_add_symbolref:
        s
        map_extend!:
            type_instance: refkw source token
            NAME ?: refname refname s

; Function: insert_symbol_type
; Description: Create a AST element of refkw making
; the name either refname or name of original symbol
; and add to the symbol table in lexical scope

func :private insert_symbol_type [refkw sym refname]
    insert_string_type:
        refkw
        get: sym NAME
        get: sym SOURCE
        get: sym TOKEN
        refname

; Function: add_to_symboltable
; Description: Take a straight list of symbols and store them to
; the symbol table in lexical scope

func :private add_to_symboltable [refkw slist]
    fold:
        ^[fn sym]
            ?: =: get: sym TYPE :symbol
                insert_symbol_type: refkw sym nil
                exception:
                    format:
                        "Attempt to store {} in symbol table"
                        [get: sym TYPE]
       nil slist


; Function: register_extern
; Description: Checks if symbol reference is from this
; compilation source and, if not, adds to the externs
; map

func :private register_extern [state sref]
    ?: =: get: state :module_name get: sref SOURCE
        sref
        @(
            map_extend!:
                get: get: state :ast EXTERNS
                get: sref NAME
                sref
            sref
        )

; Function: default_validate
; Description: Function as placeholder for invoking
; validate function for node

func default_validate [state result self]
    print!:
        format:
            "default_validate on {}.`n" [get: self TYPE]
    result

; Function: module_validate

func module_validate [state result self]
    dispatch_ast: state result self
    ;print_list_ast: "Lambda ASTs" get: self LAMBDAS
    ;print_ast: self
    self

; Function: variable_validate
; Description: Evaluate expression on rhs

func variable_validate [state result self]
    ; TODO: Reclaim old list
    ; list_delete: get: self EXPRS
    map_extend!: self EXPRS
        get_expressions: state get: self EXPRS
    list_extend!: result self


; Function: function_validate
; Description: push/pop symbol_table for args then
; evaluate expressions

func function_validate [state result self]
    st_push_table: get: self NAME
    add_to_symboltable: :funcargref get: get: self ARGLIST EXPRS
    ; TODO: Reclaim old list
    ; list_delete: get: self EXPRS
    map_extend!: self EXPRS
        get_expressions: state get: self EXPRS
    st_pop_table:
    list_extend!: result self

; Test candidates for free vars

var :private lambda_backrefs
    #{:funcargref :lambda_argref :match_predref :let_resref}

; Function: in_freevar_range
; Description: Predicate to test if input line and column
; preceed lambda line and column (i.e. FreeVar!)

func :private in_freevar_range [ll lc tl tc]
    ?: <: tl ll
        true
        ?: <: tc lc
            true
            false

; Function: new_lambda_arg
; Description: Fabricates a lambda argument and adds
; to the argument list 'alist' and updates the location
; in the lambda expression (elist) to refer to the arg list as well

func :private new_lambda_arg [elist alist el]
    let larg []
        map_extend!:
            type_instance: :lambda_argref get: el SOURCE get: el TOKEN
            NAME get: get: el TOKEN :token_str
    update!: elist index_of: elist el larg
    list_extend!:alist larg

; Function: walk_lambda
; Description: Deep walks the lambda expression, looking for
; candiate free variables

func :private walk_lambda [ll lc alist elist acc el]
    let tl [] get: get: el TOKEN :lineno
    let tc [] get: get: el TOKEN :colno
    ; If a candidate and the sourcepos is less than
    ; our tokens, it's a winner
    ?: getd: lambda_backrefs get: el TYPE false
        ?:  in_freevar_range: ll lc tl tc
            @(
                ; Generate the lambda arg and subsitute in
                ; current expression and argument lists
                new_lambda_arg: elist alist el
                list_extend!: acc el
            )
            nil
        nil

    ?: get: el EXPRS
        fold: (walk_lambda ll lc alist get: el EXPRS) acc get: el EXPRS
        nil
    acc

; Function: lambda_validate
; Description: Validate lambda and refactor
; for closures. Closures free variables become
; arguments to lambda entry point

var :private lambda_name_template "lambda_{}_{}"

func lambda_validate [state result self]
    let ll [] get: get: self TOKEN :lineno
    let lc [] get: get: self TOKEN :colno

    ; Fabricate a name
    let lname [] format: lambda_name_template [ll lc]
    map_extend!: self NAME lname

    ; Setup lexical scope and add our argument names
    st_push_table: lname
    add_to_symboltable: :lambda_argref get: get: self ARGLIST EXPRS
    ; Setup for free var substitutions
    let alist [] list_inst!:
    ; Evaluate expressions and replace free-vars
    let clist []
        fold:
            (walk_lambda
                ll
                lc
                alist
                get: self EXPRS)
            list_inst!: get_expressions: state get: self EXPRS
    ; Release lexical scope
    st_pop_table:
    ; Extend the lambda proper arg list
    ; TODO: Free old args afterwards
    map_extend!:
        get: self ARGLIST
        EXPRS
        fold:
            ^[acc oarg]
                list_extend!: acc oarg
            alist get: get: self ARGLIST EXPRS
    ; Put it in the module lambda collection
    list_extend!:
        get: get: state :ast LAMBDAS
        self
    ; print_ast: self
    ; Create a lambda_call reference and put in results
    list_extend!:
        result
        type_lambda_call: get: self SOURCE get: self TOKEN lname clist

; Function: call_validate
; Description: Validate function calls

func call_validate [state result self]
    ; TODO: Reclaim old list
    ; list_delete: get: self EXPRS
    map_extend!: self EXPRS
        get_expressions: state get: self EXPRS
    list_extend!: result self

; Let naming templates

var :private let_no_name_template "let_{}_{}"
var :private let_name_template "let_{}_{}_{}"

; Function: let_arg_validate
; Description: Validate let args symbol and expression

func :private let_arg_validate [state argexpr acc ndx]
    ?: =: mod: ndx two zero
        @(
            let [ argsym get: argexpr ndx
                  argtok get: argsym TOKEN
                  argname get: argsym NAME]
                insert_symbol_type:
                    :let_argref
                    argsym
                    format:
                        let_name_template
                        [get: argtok :lineno get: argtok :colno argname]
                list_extend!: acc get: argexpr ndx
        )
        dispatch_fn: state acc get: argexpr ndx

; Function: let_validate
; Description: Validate let args (if not empty) and
; expression

func let_validate [state result self]
    let token [] get: self TOKEN
    let letres [] get: self NAME
    let hasname [] not: nil?: letres

    ?: hasname
        map_extend!:
            self
            NAME format:
                    let_name_template
                    [get: token :lineno get: token :colno get: get: self NAME NAME]
        map_extend!:
            self
            NAME format:
                    let_no_name_template
                    [get: token :lineno get: token :colno]


    ; Create 'let' lexical scope
    st_push_table: get: self NAME
    ; Process let pairs from arglist (if any)
    ; process and put symbols (lhs) into lexical
    ; scope symbols
    let arglist [] get: self ARGLIST
    let argexpr [] get: arglist EXPRS
    let letpairs []
        type_instance: :let_pairs get: arglist SOURCE  get: arglist TOKEN

    map_extend!:
        self
        ARGLIST
        map_extend!:
            letpairs
            EXPRS
            ?: =: count: argexpr zero
                []
                fold: (let_arg_validate state argexpr) list_inst!: series: zero count: argexpr one

    ; TODO: Reclaim old list
    ; list_delete: get: self EXPRS
    ; Process 'let' expression
    map_extend!: self EXPRS
        get_expressions: state get: self EXPRS
    ; Remove 'let' lexical scope
    st_pop_table:
    ; Add result name to now current lexical scope
    ?: hasname
        insert_symbol_type: :let_resref letres get: self NAME
        nil
    list_extend!: result self

; Function: match_validate
; Description: Validates guards and return expressions

; Let naming templates

var :private match_no_name_template "match_{}_{}"
var :private match_name_template "match_{}_{}_{}"
var :private match_pred_template "{}_predref"
var :private match_local_presym  "%0"

func match_validate [state result self]
    let token [] get: self TOKEN
    let nameres [] get: self NAME
    let hasname [] not: nil?: nameres
    let mpref   [] format: match_no_name_template [get: token :lineno get: token :colno]
    ; Do name resolution
    ?: hasname
        map_extend!:
            self
            NAME format:
                    match_name_template
                    [get: token :lineno get: token :colno nameres]
        map_extend!: self NAME mpref

    ; Get the predicate name for later reference
    let mpredref [] map_extend!:
        type_instance: :match_predref get: self SOURCE token
        NAME format: match_pred_template [mpref]

    ; Evaluate the predicate
    map_extend!:
        self
        PREDICATE
        first: dispatch_fn: state [] get: self PREDICATE

    ; Setup the predicate results
    map_extend!: self PRED_REFERENCE mpredref
    ; Create 'match' lexical scope
    st_push_table: get: self NAME
    ; Put the expression reference in
    st_add_symbolref: match_local_presym mpredref
    ; Evaluate expressions
    map_extend!: self EXPRS get_expressions: state get: self EXPRS
    ; Pop 'match' lexical scope
    st_pop_table:

    ; Put result in lexical symbol table if hasname
    ?: hasname
        insert_string_type:
            :match_resref
            nameres
            get: self SOURCE
            token
            get: self NAME
        nil
    list_extend!: result self

; Simple single expression types

var :private mg_simple_set
    #{:varref :funcref :funcargref :literalref :match_predref :let_resref :let_argref}

; Function: mg_simple_lhs
; Description: Called when simple type lhs, expands to:
;   =: %0 rhs

func :private mg_simple_lhs [mref state result self]
    ; Get the first arg and substitute with =: val %0
    let mgcall []
        map_extend!:
            type_with_exprs: :call get: self SOURCE get: self TOKEN
            NAME "eq"
    map_extend!:
        mgcall
        EXPRS
        list_extend!:
            list_extend!: get: mgcall EXPRS  mref
            first: result
    pop!: result
    push!: result mgcall

; Function: match_guard_validate
; Description: Validate match guards. If it is not
; default guard, check if lhs is simple:
; litref, varref, funcref, matchresref, letresref

func match_guard_validate [state result self]
    let mref [] st_lookup: match_local_presym
    let mres [] [mref]
    let gexpr [] get_expressions: state get: self EXPRS
    ; Check for simple expansion
    match get: self IS_DEFAULT
        | false ?: get: mg_simple_set get: first: gexpr TYPE
                    mg_simple_lhs: mref state gexpr self
                    nil
    ;print_ast: self
    list_extend!: result map_extend!: self EXPRS gexpr

; Function: match_default_validate
; Description: Validate match_default

func match_default_validate [state result self]
    list_extend!: result self

; Function: match_exprref_validate
; Description: Substitution with passed in
; reference

func match_exprref_validate [state result self]
    list_extend!: result st_lookup: match_local_presym

; Function: if_validate
; Description: Validates pred then else

func if_validate [state result self]
    ; TODO: Reclaim old list
    ; list_delete: get: self EXPRS
    map_extend!: self EXPRS
        get_expressions: state get: self EXPRS
    list_extend!: result self

; Function: group_validate
; Description: Validate expressions in group

func group_validate [state result self]
    ; TODO: Reclaim old list
    ; list_delete: get: self EXPRS
    map_extend!: self EXPRS
        get_expressions: state get: self EXPRS
    list_extend!: result self

; Validates expressions in partial

var :private invalid_first_arg
    #{:match_guard :literalref :variable :function :module :include}

; Function: partial_validate
; Description: Validates expressions in partial

func partial_validate [state result self]
    ; TODO: Reclaim old list
    ; list_delete: get: self EXPRS
    map_extend!: self EXPRS
        get_expressions: state get: self EXPRS

    ; Check that first arg is usable as partial
    let pexpr [] get: self EXPRS
    ?: =: count: pexpr zero
        list_extend!: result self
        ?: get: invalid_first_arg get: first: pexpr TYPE
            token_exception:
                get: self TOKEN
                "Invalid first arg to partial"
            list_extend!: result self

; Used for assigning foidl representation of
; empty collection types (RTL instantiated)

var :private empty_lookup {
    :list     "empty_list"
    :vector   "empty_vector"
    :map      "empty_map"
    :set      "empty_set"
}

; Function: emptycollection_validate
; Description: Decipher type and resolve to
; langcore 'empty_x' reference

func emptycollection_validate [state result self]
    ;printnl!: self
    let sref [] st_lookup: get: empty_lookup get: self COLLTYPE
    list_extend!:
        result
        register_extern: state sref

; Function: collection_validate
; Description: Evaluate members of collection we
; don't care about type until we are emitting LLVM

func collection_validate [state result self]
    ; TODO: Reclaim old list
    ; list_delete: get: self EXPRS
    map_extend!: self EXPRS
        get_expressions: state get: self EXPRS
    list_extend!: result self

; Function: ref_validate
; Description: Pass through validation of
; reference types

func ref_validate [state result self]
    list_extend!: result self

; Function: symbol_validate
; Description: Resolves symbol in symbol table and
; registers in external map if resolved from
; external unit (e.g. langcore, etc)

func symbol_validate [state result self]
    let sref [] st_lookup: get: self NAME
    ?: nil?: sref
        token_exception:
            get: self TOKEN
            format:
                "Unable to resolve symbol {}" [get: self NAME]
        list_extend!:
            result
            register_extern: state sref

