;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; handler
; Compilation handler builder
;
; Copyright (c) Frank V. Castellucci
; All Rights Reserved
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

module token_utils
include langcorem

; Exception format strings
var :private excp_stub "Exception: {"
var :private excp_lcsplit "}:{"
var :private excp_lcend "} - "

func :private fail_token_header [tok]
    write!: cerr excp_stub
    write!: cerr get: tok :lineno
    write!: cerr excp_lcsplit
    write!: cerr get: tok :colno
    write!: cerr excp_lcend

; Fail on token issue
func fail_on_token [toks indx s]
    let tok [] get: toks indx
    fail_token_header: tok
    write!: cerr s
    write!: cerr get: tok :token_str
    write!: cerr nlchr
    fail:

; Fail with reason

func fail_with_cause [toks indx s]
    let tok [] get: toks indx
    fail_token_header: tok
    write!: cerr s
    write!: cerr nlchr
    fail:

; Fail if looking for list (func arg, lambda arg, let args)
func :private fail_not_list_token [toks cindx]
    fail_on_token: toks inc: cindx " expected '[' found "

func :private fail_not_symbol [toks cindx]
    fail_on_token: toks inc: cindx " expected symbol found "

func get_if_symbol_or_fail [toks ndx]
    ?:  false?: is_token_type_in_set?: toks ndx symbol_types
        fail_with_cause: toks ndx " expected symbol"
        get: get: toks ndx :token_str

; Function: is_token_type?
; Description: Tests if token is of ttype

func is_token_type? [toks indx ttype]
    =: get: get: toks indx :token_type ttype

; Function: is_token_type_in_set?
; Description: Tests if token_type is in set of ttype_set

func is_token_type_in_set? [toks indx ttype_set]
    getd: ttype_set get: get: toks indx :token_type false

; Function: source_pos_to_str
; Description: Formats a tokens line and column
; Syntax: source_pos_to_str: token

func source_pos_to_str [token]
    extend:
        extend:
            extend:
                extend: "{" get: token :lineno
                ":"
            get: token :colno
        "}"

; Common type test sets

var symbol_types #{:symbol :symbol_pred :symbol_bang}

; Function: tokens_to_type
; Description: Creates a list of tokens until ttype (non inclusive)

func tokens_to_type [toks cindx ttype]
    fold:
        ^[acc indx]
            ?: is_token_type?: toks indx ttype
                reduced: acc
                list_extend!: acc get: toks indx
        list_inst!: series: cindx count: toks 1


func index_to_nextoftype [toks cindx ttype]
    let mxcnt [] count: toks
    let res []
        fold:
            ^[acc indx]
                ?: is_token_type?: toks indx ttype
                    reduced: acc
                    inc: acc
            cindx series: cindx mxcnt 1
    ?: =: res mxcnt
        zero
        res

; Function: get_validate_funcargs
; Description: Returns validated function arglist
; Syntax: get_validate_funcargs: toks cindx
;   toks - Token list
;   cindx - Current index, assumed to be function symbol
; Fails:
;   if lbracket/rbracket not detected
;   if count of args > 15
;   if all args > 0 are symbol types

func get_validate_funcargs [toks cindx]
    ; Check that token after cindx is lbracket
    let lbrk? [] not: is_token_type?: toks inc: cindx :lbracket
    ?: lbrk?
        fail_not_list_token: toks inc: cindx
        ; Gather to rbracket
        let [sdx        +: cindx two                        ; Increment index past '['
             arglist    tokens_to_type: toks sdx :rbracket  ; Search for bracket
             acnt       count: arglist                      ; Get count results
             ldx        +: sdx acnt]                        ; Should be ']'
             ?: is_token_type?: toks ldx :rbracket
                ; Validate less than 16
                 ?: <: acnt sixteen
                    ?: =: acnt zero
                        arglist
                        fold:
                            ^[acc el]
                                ?: get: symbol_types get: el :token_type
                                    list_extend!: acc get: el :token_str
                                    fail_with_cause:
                                        toks
                                        cindx
                                        " only symbols allowed in func arglist."
                            list_inst!: arglist
                    fail_with_cause: toks cindx " function args exceeded."
                fail_with_cause: toks cindx " missing ']' to close function args."


; Function: token_count_to_type
; Description: Get count of tokens to ttype (non inclusive)

func token_count_to_type [toks cindx ttype]
    fold:
        ^[acc indx] ?: is_token_type?: toks indx ttype reduced: acc inc: acc
        0 series: cindx count: toks 1

; Function: tpdwn_process_func
; Description: HOF called by tpdwn_vf_processor to handle
; function token types. Only handles public funcs. Validates
; a symbol follows 'func' as well as a valid arglist follows
; the symbol before invoking a passed in handler reference, providing
; reference with outputchannel symbol token arglist and arglist count.
; Syntax: tpdwn_process_func: f_fn ochan toks cindx mxcnt
;   v_fn    - Function reference to variable handler
;   ochan   - The output channel
;   toks    - The list of tokens
;   cindx   - Current index into token list
;   mxcnt   - Number of tokens in toks

func :private tpdwn_process_func [f_fn toks cindx mxcnt]
    ; If ttype after var is :private... skip
    let nindx [] inc: cindx
    ?: is_token_type?: toks nindx :private
        inc: cindx
        ; Otherwise process it
        ?: is_token_type_in_set?: toks nindx symbol_types
            let [ntok       get: toks nindx
                 arglist    get_validate_funcargs: toks nindx
                 acnt       count: arglist
                 findx      +: nindx +: acnt two]
                @(
                    (f_fn ntok arglist acnt)
                    inc: findx
                )
            ; Fail syntax
            fail_on_token: toks nindx " expected symbol after 'func', found "

; Function: tpdwn_process_var
; Description: HOF called by tpdwn_vf_processor to handle
; variable token types. Only handles public vars and
; validates a symbol follows the 'var' before invoking
; a passed in handler reference with the symbol token
; only
; Syntax: tpdwn_process_var: toks cindx mxcnt v_fn
;   v_fn    - Function reference to variable handler
;   toks    - The list of tokens
;   cindx   - Current index into token list
;   mxcnt   - Number of tokens in toks

func :private tpdwn_process_var [v_fn toks cindx mxcnt]
    ; If ttype after var is :private... skip
    let nindx [] inc: cindx
    ?: is_token_type?: toks nindx :private
        inc: cindx
        ; If next is symbol ... success
        ?: is_token_type_in_set?: toks nindx symbol_types
            let [ntok get: toks nindx]
                @(
                    (v_fn ntok)
                    inc: nindx
                )
            ; Fail syntax
            fail_on_token: toks nindx " expected symbol after 'var', found "

; Function: tpdwn_vf_processor
; Description: Generic processor of top down token lists for
; variable and function tokens. Commonly used in folding of
; tokens
; Syntax: tpdwn_vf_processor: v_fn f_fn tks mxcnt acc ndx
;   v_fn   - Function reference to variable handler
;   f_fn   - Function reference to function handler
;   toks   - The list of tokens
;   mxcnt  - Number of tokens in toks
;   acc    - Accumulator (integer)
;   ndx    - Index (integer)

func :private tpdwn_vf_processor [v_fn f_fn toks mxcnt acc ndx]
     ?: >=: acc mxcnt
        reduced: acc
        let [tok get: toks acc]
            match get: tok :token_type
            | :variable     tpdwn_process_var: v_fn toks acc mxcnt
            | :function     tpdwn_process_func: f_fn toks acc mxcnt
            | :default inc: acc

; Function: process_tpdwn_vf
; Description: HOF that iterates through token list to process var
; and function statements using supplied handlers
; Syntax: process_tpdwn_vf: state var_handler func_handler
;   state - Command line flags and state settings
;   var_handler - Variable handler for context processing
;   func_handler - Function handler for context processing

func process_tpdwn_vf [state var_handler func_handler]
    let toks [] get: state :tokens
    let maxcount [] count: toks
    ; Walk tokens
    fold:
        (tpdwn_vf_processor var_handler func_handler toks maxcount)
        0 infinite

; Function: get_valid_symlist
; Description: HOF Generic extraction and validation of symbols
; from list.
; Syntax: get_valid_symlist: toks cindx
;   nlist_fn - Not list lbracket handler
;   acnt_fn - Valid count of list entries check
;   toks - Token list
;   cindx - Current index
; Fails:
;   if lbracket/rbracket calls not list fn_ref
;   if count of args > max_cap
;   if all args > 0 are symbol types calls not symbol fn_ref

func get_valid_symlist [nlist_fn acnt_fn toks cindx]
    ; Check that token after cindx is lbracket
    let nlbrk? [] not: is_token_type?: toks inc: cindx :lbracket
    ?: nlbrk?
        (nlist_fn toks inc: cindx)
        ; Gather to rbracket
        let [sdx        +: cindx two                        ; Increment index past '['
             arglist    tokens_to_type: toks sdx :rbracket  ; Search for bracket
             acnt       count: arglist                      ; Get count results
             ldx        +: sdx acnt]                        ; Should be ']'
             ?: is_token_type?: toks ldx :rbracket
                let [vcnt (acnt_fn acnt)]
                    ?: =: acnt zero
                        arglist
                        fold:
                            ^[acc el]
                                ?: get: symbol_types get: el :token_type
                                    list_extend!: acc get: el :token_str
                                    fail_not_symbol: toks cindx
                            list_inst!: arglist
                fail_with_cause: toks cindx " missing ']' to close list."

; Function: capture_include
; Description:
; Syntax:

func :private capture_include [mlist toks acc ndx]
    let fetched []
        get_valid_symlist:
            get_if_symbol_or_fail
            ^[acnt] true
            toks
            ndx

    ?: string?: fetched
        @(
            list_extend!: mlist fetched
            inc: ndx
        )
        @(
            fold:
                ^[a b] list_extend!: a b
                mlist fetched
            +: ndx +: count: fetched two
        )

; Function: dispatch_while_ttype
; Description:
; Syntax:

func :private dispatch_while_ttype [d_fn ttype toks acc ndx]
    let nindx [] index_to_nextoftype: toks acc ttype
    ?: >: nindx zero
        (d_fn toks acc nindx)
        ;capture_include: mlist toks acc nindx
        reduced: acc

; Function: process_tpdwn_inc
; Description: Extract all includes into single list
; Syntax: process_tpdwn_inc

func process_tpdwn_inc [toks]
    let maxcount [] count: toks
    let mlist [] list_inst!:
    ; Reduce tokens looking for :include token type
    let fndx [] index_to_nextoftype: toks 0 :include
    ?: >: fndx zero
        fold:
            (dispatch_while_ttype
                (capture_include mlist)
                :include toks) fndx series: 0 maxcount 1
        nil
    mlist
